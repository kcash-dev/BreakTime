{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport NotificationPresenter from \"./NotificationPresenterModule\";\nvar warningMessageShown = false;\nexport default function presentNotificationAsync(content) {\n  var identifier,\n      _args = arguments;\n  return _regeneratorRuntime.async(function presentNotificationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          identifier = _args.length > 1 && _args[1] !== undefined ? _args[1] : uuidv4();\n\n          if (__DEV__ && !warningMessageShown) {\n            console.warn('`presentNotificationAsync` has been deprecated in favor of using `scheduleNotificationAsync` + an explicit notification handler. Read more at https://expo.fyi/presenting-notifications-deprecated.');\n            warningMessageShown = true;\n          }\n\n          if (NotificationPresenter.presentNotificationAsync) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('Notifications', 'presentNotificationAsync');\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(NotificationPresenter.presentNotificationAsync(identifier, content));\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/presentNotificationAsync.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AACA,SAAS,EAAE,IAAI,MAAf,QAA6B,MAA7B;AAEA,OAAO,qBAAP;AAGA,IAAI,mBAAmB,GAAG,KAA1B;AAMA,eAAe,SAAe,wBAAf,CACb,OADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,UAAA,UAFa,2DAEQ,MAAM,EAFd;;AAIb,cAAI,OAAO,IAAI,CAAC,mBAAhB,EAAqC;AACnC,YAAA,OAAO,CAAC,IAAR,CACE,qMADF;AAGA,YAAA,mBAAmB,GAAG,IAAtB;AACD;;AATY,cAWR,qBAAqB,CAAC,wBAXd;AAAA;AAAA;AAAA;;AAAA,gBAYL,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,0BAAzC,CAZK;;AAAA;AAAA;AAAA,2CAeA,qBAAqB,CAAC,wBAAtB,CAA+C,UAA/C,EAA2D,OAA3D,CAfA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport NotificationPresenter from './NotificationPresenterModule';\nimport { NotificationContentInput } from './Notifications.types';\n\nlet warningMessageShown = false;\n\n/**\n * @deprecated Use `scheduleNotificationAsync` with an explicit notification handler.\n * [Read more](https://expo.fyi/presenting-notifications-deprecated).\n */\nexport default async function presentNotificationAsync(\n  content: NotificationContentInput,\n  identifier: string = uuidv4()\n): Promise<string> {\n  if (__DEV__ && !warningMessageShown) {\n    console.warn(\n      '`presentNotificationAsync` has been deprecated in favor of using `scheduleNotificationAsync` + an explicit notification handler. Read more at https://expo.fyi/presenting-notifications-deprecated.'\n    );\n    warningMessageShown = true;\n  }\n\n  if (!NotificationPresenter.presentNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'presentNotificationAsync');\n  }\n\n  return await NotificationPresenter.presentNotificationAsync(identifier, content);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}