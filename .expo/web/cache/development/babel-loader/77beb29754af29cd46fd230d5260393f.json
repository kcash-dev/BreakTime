{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kylecash/Documents/GitHub/BreakTime/src/components/Countdown.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { colors } from \"../utils/Colors\";\nimport { fontSizes } from \"../utils/Sizes\";\n\nvar minutesToMillis = function minutesToMillis(min) {\n  return min * 1000 * 60;\n};\n\nvar formatTime = function formatTime(timeEntered) {\n  return timeEntered < 10 ? \"0\" + timeEntered : timeEntered;\n};\n\nexport var Countdown = function Countdown(_ref) {\n  var time = _ref.time,\n      isStarted = _ref.isStarted,\n      onEnd = _ref.onEnd;\n  var interval = React.useRef(null);\n\n  var _useState = useState(minutesToMillis(time)),\n      _useState2 = _slicedToArray(_useState, 2),\n      timer = _useState2[0],\n      setTimer = _useState2[1];\n\n  var minute = Math.floor(timer / 1000 / 60) % 60;\n  var seconds = Math.floor(timer / 1000) % 60;\n\n  var handleOnEnd = function handleOnEnd() {\n    onEnd();\n  };\n\n  var decrementTime = function decrementTime() {\n    setTimer(function (times) {\n      if (times === 0) {\n        clearInterval(interval.current);\n        handleOnEnd();\n        return times;\n      }\n\n      var timeLeft = times - 1000;\n      return timeLeft;\n    });\n  };\n\n  useEffect(function () {\n    setTimer(minutesToMillis(time));\n  }, [time]);\n  useEffect(function () {\n    if (isStarted) {\n      if (interval.current) clearInterval(interval.current);\n      return;\n    }\n\n    interval.current = setInterval(decrementTime, 1000);\n    return function () {\n      return clearInterval(interval.current);\n    };\n  }, [isStarted]);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, formatTime(minute), \":\", formatTime(seconds)));\n};\nvar styles = StyleSheet.create({\n  text: {\n    color: colors.white,\n    fontSize: fontSizes.xxxl,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    textShadowColor: colors.black,\n    textShadowOffset: {\n      width: 0.5,\n      height: 0.5\n    },\n    textShadowRadius: 1\n  }\n});","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/src/components/Countdown.js"],"names":["React","useState","useEffect","colors","fontSizes","minutesToMillis","min","formatTime","timeEntered","Countdown","time","isStarted","onEnd","interval","useRef","timer","setTimer","minute","Math","floor","seconds","handleOnEnd","decrementTime","times","clearInterval","current","timeLeft","setInterval","styles","text","StyleSheet","create","color","white","fontSize","xxxl","fontWeight","textAlign","textShadowColor","black","textShadowOffset","width","height","textShadowRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet\n} from 'react-native';\n\nimport { colors } from '../utils/Colors';\nimport { fontSizes } from '../utils/Sizes';\n\nconst minutesToMillis = (min) => min * 1000 * 60;\nconst formatTime = (timeEntered) => timeEntered < 10 ? `0${timeEntered}` : timeEntered;\n\nexport const Countdown = ({\n    time,\n    isStarted,\n    onEnd\n}) => {\n    const interval = React.useRef(null)\n    const [ timer, setTimer ] = useState(minutesToMillis(time));\n    const minute = Math.floor(timer / 1000 / 60) % 60;\n    const seconds = Math.floor(timer / 1000) % 60;\n\n    const handleOnEnd = () => {\n        onEnd();\n    }\n\n    const decrementTime = () => {\n        setTimer((times) => {\n            if(times === 0) {\n                clearInterval(interval.current)\n                handleOnEnd();\n                return times;\n            }\n            const timeLeft = times - 1000;\n            return timeLeft;\n        })\n    }\n\n    useEffect(() => {\n        setTimer(minutesToMillis(time))\n    }, [ time ])\n\n   useEffect(() => {\n    if (isStarted) {\n        if(interval.current) clearInterval(interval.current)\n        return;\n    }\n    interval.current = setInterval(decrementTime, 1000)\n\n    return () => clearInterval(interval.current)\n   }, [ isStarted ])\n\n    return(\n        <View>\n            <Text style={ styles.text }>{ formatTime(minute) }:{ formatTime(seconds) }</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    text: {\n        color: colors.white,\n        fontSize: fontSizes.xxxl,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        textShadowColor: colors.black, \n        textShadowOffset: { width: 0.5, height: 0.5 }, \n        textShadowRadius: 1,\n    }\n})"]},"metadata":{},"sourceType":"module"}