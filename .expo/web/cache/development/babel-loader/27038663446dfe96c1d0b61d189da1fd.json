{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"accessibilityLabel\", \"accessibilityLiveRegion\", \"accessibilityState\", \"accessibilityValue\", \"accessible\", \"classList\", \"dataSet\", \"disabled\", \"importantForAccessibility\", \"nativeID\", \"pointerEvents\", \"style\", \"testID\", \"accessibilityRole\"];\nimport AccessibilityUtil from \"../AccessibilityUtil\";\nimport css from \"../../exports/StyleSheet/css\";\nimport StyleSheet from \"../../exports/StyleSheet\";\nimport styleResolver from \"../../exports/StyleSheet/styleResolver\";\nimport { STYLE_GROUPS } from \"../../exports/StyleSheet/constants\";\nvar emptyObject = {};\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar classes = css.create({\n  reset: {\n    backgroundColor: 'transparent',\n    color: 'inherit',\n    font: 'inherit',\n    listStyle: 'none',\n    margin: 0,\n    textAlign: 'inherit',\n    textDecoration: 'none'\n  },\n  cursor: {\n    cursor: 'pointer'\n  }\n}, STYLE_GROUPS.classicReset);\nvar pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nvar createDOMProps = function createDOMProps(component, props) {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  var _props = props,\n      accessibilityLabel = _props.accessibilityLabel,\n      accessibilityLiveRegion = _props.accessibilityLiveRegion,\n      accessibilityState = _props.accessibilityState,\n      accessibilityValue = _props.accessibilityValue,\n      accessible = _props.accessible,\n      classList = _props.classList,\n      dataSet = _props.dataSet,\n      providedDisabled = _props.disabled,\n      importantForAccessibility = _props.importantForAccessibility,\n      nativeID = _props.nativeID,\n      pointerEvents = _props.pointerEvents,\n      providedStyle = _props.style,\n      testID = _props.testID,\n      accessibilityRole = _props.accessibilityRole,\n      domProps = _objectWithoutProperties(_props, _excluded);\n\n  var disabled = accessibilityState != null && accessibilityState.disabled === true || providedDisabled;\n  var role = AccessibilityUtil.propsToAriaRole(props);\n  var isNativeInteractiveElement = role === 'link' || component === 'a' || component === 'button' || component === 'input' || component === 'select' || component === 'textarea' || domProps.contentEditable != null;\n\n  if (dataSet != null) {\n    for (var prop in dataSet) {\n      if (hasOwnProperty.call(dataSet, prop)) {\n        var value = dataSet[prop];\n\n        if (value != null) {\n          domProps[\"data-\" + prop] = value;\n        }\n      }\n    }\n  }\n\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n\n  if (role != null) {\n    domProps.role = role;\n  }\n\n  if (accessibilityState != null) {\n    for (var _prop in accessibilityState) {\n      var _value = accessibilityState[_prop];\n\n      if (_value != null) {\n        if (_prop === 'disabled' || _prop === 'hidden') {\n          if (_value === true) {\n            domProps[\"aria-\" + _prop] = _value;\n            domProps[_prop] = _value;\n          }\n        } else {\n          domProps[\"aria-\" + _prop] = _value;\n        }\n      }\n    }\n  }\n\n  if (accessibilityValue != null) {\n    for (var _prop2 in accessibilityValue) {\n      var _value2 = accessibilityValue[_prop2];\n\n      if (_value2 != null) {\n        domProps[\"aria-value\" + _prop2] = _value2;\n      }\n    }\n  }\n\n  if (importantForAccessibility === 'no-hide-descendants') {\n    domProps['aria-hidden'] = true;\n  }\n\n  if (disabled === true) {\n    domProps['aria-disabled'] = true;\n    domProps.disabled = true;\n  }\n\n  var focusable = !disabled && importantForAccessibility !== 'no' && importantForAccessibility !== 'no-hide-descendants';\n\n  if (isNativeInteractiveElement) {\n    if (accessible === false || !focusable) {\n      domProps.tabIndex = '-1';\n    } else {\n      domProps['data-focusable'] = true;\n    }\n  } else if (role === 'button' || role === 'menuitem' || role === 'textbox') {\n    if (accessible !== false && focusable) {\n      domProps['data-focusable'] = true;\n      domProps.tabIndex = '0';\n    }\n  } else {\n    if (accessible === true && focusable) {\n      domProps['data-focusable'] = true;\n      domProps.tabIndex = '0';\n    }\n  }\n\n  var reactNativeStyle = StyleSheet.compose(pointerEvents && pointerEventsStyles[pointerEvents], providedStyle);\n  var needsCursor = (role === 'button' || role === 'link') && !disabled;\n  var needsReset = component === 'a' || component === 'button' || component === 'li' || component === 'ul' || role === 'heading';\n  var finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList];\n\n  var _styleResolver$resolv = styleResolver.resolve(reactNativeStyle, finalClassList),\n      className = _styleResolver$resolv.className,\n      style = _styleResolver$resolv.style;\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  }\n\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  }\n\n  if (component === 'a' && domProps.target === '_blank') {\n    domProps.rel = (domProps.rel || '') + \" noopener noreferrer\";\n  }\n\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  if (domProps['data-focusable']) {\n    var onClick = domProps.onClick;\n\n    if (onClick != null) {\n      if (disabled) {\n        domProps.onClick = function (e) {\n          e.stopPropagation();\n        };\n      } else if (!isNativeInteractiveElement) {\n        var onKeyDown = domProps.onKeyDown;\n\n        domProps.onKeyDown = function (e) {\n          var key = e.key,\n              repeat = e.repeat;\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n          var isButtonRole = role === 'button' || role === 'menuitem';\n\n          if (onKeyDown != null) {\n            onKeyDown(e);\n          }\n\n          if (!repeat && key === 'Enter') {\n            onClick(e);\n          } else if (isSpacebarKey && isButtonRole) {\n            if (!repeat) {\n              onClick(e);\n            }\n\n            e.preventDefault();\n          }\n        };\n      }\n    }\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-web/src/modules/createDOMProps/index.js"],"names":["AccessibilityUtil","css","StyleSheet","styleResolver","STYLE_GROUPS","emptyObject","hasOwnProperty","Object","prototype","classes","create","reset","backgroundColor","color","font","listStyle","margin","textAlign","textDecoration","cursor","classicReset","pointerEventsStyles","auto","pointerEvents","none","createDOMProps","component","props","accessibilityLabel","accessibilityLiveRegion","accessibilityState","accessibilityValue","accessible","classList","dataSet","providedDisabled","disabled","importantForAccessibility","nativeID","providedStyle","style","testID","accessibilityRole","domProps","role","propsToAriaRole","isNativeInteractiveElement","contentEditable","prop","call","value","focusable","tabIndex","reactNativeStyle","compose","needsCursor","needsReset","finalClassList","resolve","className","id","target","rel","onClick","e","stopPropagation","onKeyDown","key","repeat","isSpacebarKey","isButtonRole","preventDefault"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport AccessibilityUtil from '../AccessibilityUtil';\nimport css from '../../exports/StyleSheet/css';\nimport StyleSheet from '../../exports/StyleSheet';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport { STYLE_GROUPS } from '../../exports/StyleSheet/constants';\n\nconst emptyObject = {};\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n// Reset styles for heading, link, and list DOM elements\nconst classes = css.create(\n  {\n    reset: {\n      backgroundColor: 'transparent',\n      color: 'inherit',\n      font: 'inherit',\n      listStyle: 'none',\n      margin: 0,\n      textAlign: 'inherit',\n      textDecoration: 'none'\n    },\n    cursor: {\n      cursor: 'pointer'\n    }\n  },\n  STYLE_GROUPS.classicReset\n);\n\nconst pointerEventsStyles = StyleSheet.create({\n  auto: {\n    pointerEvents: 'auto'\n  },\n  'box-none': {\n    pointerEvents: 'box-none'\n  },\n  'box-only': {\n    pointerEvents: 'box-only'\n  },\n  none: {\n    pointerEvents: 'none'\n  }\n});\n\nconst createDOMProps = (component, props) => {\n  if (!props) {\n    props = emptyObject;\n  }\n\n  const {\n    accessibilityLabel,\n    accessibilityLiveRegion,\n    accessibilityState,\n    accessibilityValue,\n    accessible,\n    classList,\n    dataSet,\n    disabled: providedDisabled,\n    importantForAccessibility,\n    nativeID,\n    pointerEvents,\n    style: providedStyle,\n    testID,\n    /* eslint-disable */\n    accessibilityRole,\n    /* eslint-enable */\n    ...domProps\n  } = props;\n\n  const disabled =\n    (accessibilityState != null && accessibilityState.disabled === true) || providedDisabled;\n  const role = AccessibilityUtil.propsToAriaRole(props);\n  const isNativeInteractiveElement =\n    role === 'link' ||\n    component === 'a' ||\n    component === 'button' ||\n    component === 'input' ||\n    component === 'select' ||\n    component === 'textarea' ||\n    domProps.contentEditable != null;\n\n  // dataSet\n  if (dataSet != null) {\n    for (const prop in dataSet) {\n      if (hasOwnProperty.call(dataSet, prop)) {\n        const value = dataSet[prop];\n        if (value != null) {\n          domProps[`data-${prop}`] = value;\n        }\n      }\n    }\n  }\n\n  // accessibilityLabel\n  if (accessibilityLabel != null) {\n    domProps['aria-label'] = accessibilityLabel;\n  }\n\n  // accessibilityLiveRegion\n  if (accessibilityLiveRegion != null) {\n    domProps['aria-live'] = accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion;\n  }\n\n  // accessibilityRole\n  if (role != null) {\n    domProps.role = role;\n  }\n\n  // accessibilityState\n  if (accessibilityState != null) {\n    for (const prop in accessibilityState) {\n      const value = accessibilityState[prop];\n      if (value != null) {\n        if (prop === 'disabled' || prop === 'hidden') {\n          if (value === true) {\n            domProps[`aria-${prop}`] = value;\n            // also set prop directly to pick up host component behaviour\n            domProps[prop] = value;\n          }\n        } else {\n          domProps[`aria-${prop}`] = value;\n        }\n      }\n    }\n  }\n\n  // accessibilityValue\n  if (accessibilityValue != null) {\n    for (const prop in accessibilityValue) {\n      const value = accessibilityValue[prop];\n      if (value != null) {\n        domProps[`aria-value${prop}`] = value;\n      }\n    }\n  }\n\n  // legacy fallbacks\n  if (importantForAccessibility === 'no-hide-descendants') {\n    domProps['aria-hidden'] = true;\n  }\n  if (disabled === true) {\n    domProps['aria-disabled'] = true;\n    domProps.disabled = true;\n  }\n\n  // FOCUS\n  // Assume that 'link' is focusable by default (uses <a>).\n  // Assume that 'button' is not (uses <div role='button'>) but must be treated as such.\n  const focusable =\n    !disabled &&\n    importantForAccessibility !== 'no' &&\n    importantForAccessibility !== 'no-hide-descendants';\n  if (isNativeInteractiveElement) {\n    if (accessible === false || !focusable) {\n      domProps.tabIndex = '-1';\n    } else {\n      domProps['data-focusable'] = true;\n    }\n  } else if (role === 'button' || role === 'menuitem' || role === 'textbox') {\n    if (accessible !== false && focusable) {\n      domProps['data-focusable'] = true;\n      domProps.tabIndex = '0';\n    }\n  } else {\n    if (accessible === true && focusable) {\n      domProps['data-focusable'] = true;\n      domProps.tabIndex = '0';\n    }\n  }\n\n  // STYLE\n  const reactNativeStyle = StyleSheet.compose(\n    pointerEvents && pointerEventsStyles[pointerEvents],\n    providedStyle\n  );\n\n  // Additional style resets for interactive elements\n  const needsCursor = (role === 'button' || role === 'link') && !disabled;\n  const needsReset =\n    component === 'a' ||\n    component === 'button' ||\n    component === 'li' ||\n    component === 'ul' ||\n    role === 'heading';\n  // Classic CSS styles\n  const finalClassList = [needsReset && classes.reset, needsCursor && classes.cursor, classList];\n\n  // Resolve styles\n  const { className, style } = styleResolver.resolve(reactNativeStyle, finalClassList);\n\n  if (className != null && className !== '') {\n    domProps.className = className;\n  }\n\n  if (style) {\n    domProps.style = style;\n  }\n\n  // OTHER\n  // Native element ID\n  if (nativeID != null) {\n    domProps.id = nativeID;\n  }\n\n  // Link security\n  // https://mathiasbynens.github.io/rel-noopener/\n  // Note: using \"noreferrer\" doesn't impact referrer tracking for https\n  // transfers (i.e., from https to https).\n  if (component === 'a' && domProps.target === '_blank') {\n    domProps.rel = `${domProps.rel || ''} noopener noreferrer`;\n  }\n  // Automated test IDs\n  if (testID != null) {\n    domProps['data-testid'] = testID;\n  }\n\n  // Keyboard accessibility\n  // Button-like roles should trigger 'onClick' if SPACE key is pressed.\n  // Button-like roles should not trigger 'onClick' if they are disabled.\n  if (domProps['data-focusable']) {\n    const onClick = domProps.onClick;\n    if (onClick != null) {\n      if (disabled) {\n        // Prevent click propagating if the element is disabled. See #1757\n        domProps.onClick = function(e) {\n          e.stopPropagation();\n        };\n      } else if (!isNativeInteractiveElement) {\n        // For native elements that are focusable but don't dispatch 'click' events\n        // for keyboards.\n        const onKeyDown = domProps.onKeyDown;\n        domProps.onKeyDown = function(e) {\n          const { key, repeat } = e;\n          const isSpacebarKey = key === ' ' || key === 'Spacebar';\n          const isButtonRole = role === 'button' || role === 'menuitem';\n          if (onKeyDown != null) {\n            onKeyDown(e);\n          }\n          if (!repeat && key === 'Enter') {\n            onClick(e);\n          } else if (isSpacebarKey && isButtonRole) {\n            if (!repeat) {\n              onClick(e);\n            }\n            // Prevent spacebar scrolling the window\n            e.preventDefault();\n          }\n        };\n      }\n    }\n  }\n\n  return domProps;\n};\n\nexport default createDOMProps;\n"]},"metadata":{},"sourceType":"module"}