{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-chart-kit/dist/StackedBarChart.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\nimport AbstractChart, { DEFAULT_X_LABELS_HEIGHT_PERCENTAGE } from \"./AbstractChart\";\n\nvar StackedBarChart = function (_super) {\n  __extends(StackedBarChart, _super);\n\n  function StackedBarChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getBarPercentage = function () {\n      var _a = _this.props.chartConfig.barPercentage,\n          barPercentage = _a === void 0 ? 1 : _a;\n      return barPercentage;\n    };\n\n    _this.getBarRadius = function (ret, x) {\n      return _this.props.chartConfig.barRadius && ret.length === x.length - 1 ? _this.props.chartConfig.barRadius : 0;\n    };\n\n    _this.renderBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          border = _a.border,\n          colors = _a.colors,\n          _b = _a.stackedBar,\n          stackedBar = _b === void 0 ? false : _b,\n          verticalLabelsHeightPercentage = _a.verticalLabelsHeightPercentage;\n      return data.map(function (x, i) {\n        var barWidth = 32 * _this.getBarPercentage();\n\n        var ret = [];\n        var h = 0;\n        var st = paddingTop;\n        var fac = 1;\n\n        if (stackedBar) {\n          fac = 0.7;\n        }\n\n        var sum = _this.props.percentile ? x.reduce(function (a, b) {\n          return a + b;\n        }, 0) : border;\n        var barsAreaHeight = height * verticalLabelsHeightPercentage;\n\n        for (var z = 0; z < x.length; z++) {\n          h = barsAreaHeight * (x[z] / sum);\n          var y = barsAreaHeight - h + st;\n          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * fac;\n          ret.push(React.createElement(Rect, {\n            key: Math.random(),\n            x: xC,\n            y: y,\n            rx: _this.getBarRadius(ret, x),\n            ry: _this.getBarRadius(ret, x),\n            width: barWidth,\n            height: h,\n            fill: colors[z],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 30\n            }\n          }));\n\n          if (!_this.props.hideLegend) {\n            ret.push(React.createElement(Text, _extends({\n              key: Math.random(),\n              x: xC + 7 + barWidth / 2,\n              textAnchor: \"end\",\n              y: h > 15 ? y + 15 : y + 7\n            }, _this.getPropsForLabels(), {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 34\n              }\n            }), x[z]));\n          }\n\n          st -= h;\n        }\n\n        return ret;\n      });\n    };\n\n    _this.renderLegend = function (_a) {\n      var legend = _a.legend,\n          colors = _a.colors,\n          width = _a.width,\n          height = _a.height;\n      return legend.map(function (x, i) {\n        return React.createElement(G, {\n          key: Math.random(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }\n        }, React.createElement(Rect, {\n          width: \"16px\",\n          height: \"16px\",\n          fill: colors[i],\n          rx: 8,\n          ry: 8,\n          x: width * 0.71,\n          y: height * 0.7 - i * 50,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }\n        }), React.createElement(Text, _extends({\n          x: width * 0.78,\n          y: height * 0.76 - i * 50\n        }, _this.getPropsForLabels(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }\n        }), x));\n      });\n    };\n\n    return _this;\n  }\n\n  StackedBarChart.prototype.render = function () {\n    var paddingTop = 15;\n    var paddingRight = 50;\n    var barWidth = 32 * this.getBarPercentage();\n    var _a = this.props,\n        width = _a.width,\n        height = _a.height,\n        _b = _a.style,\n        style = _b === void 0 ? {} : _b,\n        data = _a.data,\n        _c = _a.withHorizontalLabels,\n        withHorizontalLabels = _c === void 0 ? true : _c,\n        _d = _a.withVerticalLabels,\n        withVerticalLabels = _d === void 0 ? true : _d,\n        _e = _a.segments,\n        segments = _e === void 0 ? 4 : _e,\n        decimalPlaces = _a.decimalPlaces,\n        _f = _a.percentile,\n        percentile = _f === void 0 ? false : _f,\n        _g = _a.verticalLabelsHeightPercentage,\n        verticalLabelsHeightPercentage = _g === void 0 ? DEFAULT_X_LABELS_HEIGHT_PERCENTAGE : _g,\n        _h = _a.formatYLabel,\n        formatYLabel = _h === void 0 ? function (yLabel) {\n      return yLabel;\n    } : _h,\n        _j = _a.hideLegend,\n        hideLegend = _j === void 0 ? false : _j;\n    var _k = style.borderRadius,\n        borderRadius = _k === void 0 ? 0 : _k;\n    var config = {\n      width: width,\n      height: height\n    };\n    var border = 0;\n    var max = 0;\n\n    for (var i = 0; i < data.data.length; i++) {\n      var actual = data.data[i].reduce(function (pv, cv) {\n        return pv + cv;\n      }, 0);\n\n      if (actual > max) {\n        max = actual;\n      }\n    }\n\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n\n    var showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    var stackedBar = showLegend;\n    return React.createElement(View, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, React.createElement(Svg, {\n      height: height,\n      width: width,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), React.createElement(Rect, {\n      width: \"100%\",\n      height: height,\n      rx: borderRadius,\n      ry: borderRadius,\n      fill: \"url(#backgroundGradient)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, this.renderHorizontalLines(__assign(__assign({}, config), {\n      count: segments,\n      paddingTop: paddingTop,\n      verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {\n      count: segments,\n      data: [0, border],\n      paddingTop: paddingTop,\n      paddingRight: paddingRight,\n      decimalPlaces: decimalPlaces,\n      verticalLabelsHeightPercentage: verticalLabelsHeightPercentage,\n      formatYLabel: formatYLabel\n    })) : null), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {\n      labels: data.labels,\n      paddingRight: paddingRight + 28,\n      stackedBar: stackedBar,\n      paddingTop: paddingTop,\n      horizontalOffset: barWidth,\n      verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n    })) : null), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, this.renderBars(__assign(__assign({}, config), {\n      data: data.data,\n      border: border,\n      colors: this.props.data.barColors,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight + 20,\n      stackedBar: stackedBar,\n      verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n    }))), showLegend && this.renderLegend(__assign(__assign({}, config), {\n      legend: data.legend,\n      colors: this.props.data.barColors\n    }))));\n  };\n\n  return StackedBarChart;\n}(AbstractChart);\n\nexport default StackedBarChart;","map":{"version":3,"sources":["../src/StackedBarChart.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;;AAEA,SAAS,CAAT,EAAY,IAAZ,EAAkB,GAAlB,EAAuB,IAAvB,QAAmC,kBAAnC;AAEA,OAAO,aAAP,IAGE,kCAHF;;AA2DA,IAAA,eAAA,GAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAA9B,WAAA,eAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAIE,IAAA,KAAA,CAAA,gBAAA,GAAmB,YAAA;AACT,UAAA,EAAA,GAAsB,KAAI,CAAC,KAAL,CAAW,WAAX,CAAL,aAAjB;AAAA,UAAA,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,EAAjB;AACR,aAAO,aAAP;AACD,KAHD;;AAKA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,GAAD,EAAsB,CAAtB,EAAuC;AACpD,aAAO,KAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,SAAvB,IAAoC,GAAG,CAAC,MAAJ,KAAe,CAAC,CAAC,MAAF,GAAW,CAA9D,GACH,KAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,SADpB,GAEH,CAFJ;AAGD,KAJD;;AAMA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAC,EAAD,EAsBZ;UArBC,IAAI,GAAA,EAAA,CAAA,I;UACJ,KAAK,GAAA,EAAA,CAAA,K;UACL,MAAM,GAAA,EAAA,CAAA,M;UACN,UAAU,GAAA,EAAA,CAAA,U;UACV,YAAY,GAAA,EAAA,CAAA,Y;UACZ,MAAM,GAAA,EAAA,CAAA,M;UACN,MAAM,GAAA,EAAA,CAAA,M;UACN,EAAA,GAAA,EAAA,CAAA,U;UAAA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;UAClB,8BAA8B,GAAA,EAAA,CAAA,8B;AAc9B,aAAA,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAI,CAAJ,EAAK;AACZ,YAAM,QAAQ,GAAG,KAAK,KAAI,CAAC,gBAAL,EAAtB;;AACA,YAAM,GAAG,GAAG,EAAZ;AACA,YAAI,CAAC,GAAG,CAAR;AACA,YAAI,EAAE,GAAG,UAAT;AAEA,YAAI,GAAG,GAAG,CAAV;;AACA,YAAI,UAAJ,EAAgB;AACd,UAAA,GAAG,GAAG,GAAN;AACD;;AACD,YAAM,GAAG,GAAG,KAAI,CAAC,KAAL,CAAW,UAAX,GAAwB,CAAC,CAAC,MAAF,CAAS,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,iBAAA,CAAC,GAAD,CAAA;AAAK,SAAxB,EAA0B,CAA1B,CAAxB,GAAuD,MAAnE;AACA,YAAM,cAAc,GAAG,MAAM,GAAG,8BAAhC;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AACjC,UAAA,CAAC,GAAG,cAAc,IAAI,CAAC,CAAC,CAAD,CAAD,GAAO,GAAX,CAAlB;AACA,cAAM,CAAC,GAAG,cAAc,GAAG,CAAjB,GAAqB,EAA/B;AACA,cAAM,EAAE,GACN,CAAC,YAAY,GACV,CAAC,IAAI,KAAK,GAAG,YAAZ,CAAF,GAA+B,IAAI,CAAC,MADrC,GAEC,QAAQ,GAAG,CAFb,IAGA,GAJF;AAMA,UAAA,GAAG,CAAC,IAAJ,CACE,oBAAC,IAAD;AACE,YAAA,GAAG,EAAE,IAAI,CAAC,MAAL,EADP;AAEE,YAAA,CAAC,EAAE,EAFL;AAGE,YAAA,CAAC,EAAE,CAHL;AAIE,YAAA,EAAE,EAAE,KAAI,CAAC,YAAL,CAAkB,GAAlB,EAAuB,CAAvB,CAJN;AAKE,YAAA,EAAE,EAAE,KAAI,CAAC,YAAL,CAAkB,GAAlB,EAAuB,CAAvB,CALN;AAME,YAAA,KAAK,EAAE,QANT;AAOE,YAAA,MAAM,EAAE,CAPV;AAQE,YAAA,IAAI,EAAE,MAAM,CAAC,CAAD,CARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAaA,cAAI,CAAC,KAAI,CAAC,KAAL,CAAW,UAAhB,EAA4B;AAC1B,YAAA,GAAG,CAAC,IAAJ,CACE,oBAAC,IAAD;AACE,cAAA,GAAG,EAAE,IAAI,CAAC,MAAL,EADP;AAEE,cAAA,CAAC,EAAE,EAAE,GAAG,CAAL,GAAS,QAAQ,GAAG,CAFzB;AAGE,cAAA,UAAU,EAAC,KAHb;AAIE,cAAA,CAAC,EAAE,CAAC,GAAG,EAAJ,GAAS,CAAC,GAAG,EAAb,GAAkB,CAAC,GAAG;AAJ3B,eAKM,KAAI,CAAC,iBAAL,EALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOG,CAAC,CAAC,CAAD,CAPJ,CADF;AAWD;;AAED,UAAA,EAAE,IAAI,CAAN;AACD;;AAED,eAAO,GAAP;AACD,OApDD,CAAA;AAoDE,KA3EJ;;AA6EA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,EAAD,EAQd;UAPC,MAAM,GAAA,EAAA,CAAA,M;UACN,MAAM,GAAA,EAAA,CAAA,M;UACN,KAAK,GAAA,EAAA,CAAA,K;UACL,MAAM,GAAA,EAAA,CAAA,M;AAKN,aAAA,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ,EAAK;AACd,eACE,oBAAC,CAAD;AAAG,UAAA,GAAG,EAAE,IAAI,CAAC,MAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,MAAM,EAAC,MAFT;AAGE,UAAA,IAAI,EAAE,MAAM,CAAC,CAAD,CAHd;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE,CALN;AAME,UAAA,CAAC,EAAE,KAAK,GAAG,IANb;AAOE,UAAA,CAAC,EAAE,MAAM,GAAG,GAAT,GAAe,CAAC,GAAG,EAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAUE,oBAAC,IAAD;AACE,UAAA,CAAC,EAAE,KAAK,GAAG,IADb;AAEE,UAAA,CAAC,EAAE,MAAM,GAAG,IAAT,GAAgB,CAAC,GAAG;AAFzB,WAGM,KAAI,CAAC,iBAAL,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKG,CALH,CAVF,CADF;AAoBD,OArBD,CAAA;AAqBE,KA9BJ;;;AAsJD;;AAtHC,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,UAAU,GAAG,EAAnB;AACA,QAAM,YAAY,GAAG,EAArB;AACA,QAAM,QAAQ,GAAG,KAAK,KAAK,gBAAL,EAAtB;AAEM,QAAA,EAAA,GAeF,KAAK,KAfH;AAAA,QACJ,KAAK,GAAA,EAAA,CAAA,KADD;AAAA,QAEJ,MAAM,GAAA,EAAA,CAAA,MAFF;AAAA,QAGJ,EAAA,GAAA,EAAA,CAAA,KAHI;AAAA,QAGJ,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAHN;AAAA,QAIJ,IAAI,GAAA,EAAA,CAAA,IAJA;AAAA,QAKJ,EAAA,GAAA,EAAA,CAAA,oBALI;AAAA,QAKJ,oBAAoB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EALvB;AAAA,QAMJ,EAAA,GAAA,EAAA,CAAA,kBANI;AAAA,QAMJ,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EANrB;AAAA,QAOJ,EAAA,GAAA,EAAA,CAAA,QAPI;AAAA,QAOJ,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,EAPR;AAAA,QAQJ,aAAa,GAAA,EAAA,CAAA,aART;AAAA,QASJ,EAAA,GAAA,EAAA,CAAA,UATI;AAAA,QASJ,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EATd;AAAA,QAUJ,EAAA,GAAA,EAAA,CAAA,8BAVI;AAAA,QAUJ,8BAA8B,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,kCAAH,GAAqC,EAV/D;AAAA,QAWJ,EAAA,GAAA,EAAA,CAAA,YAXI;AAAA,QAWJ,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAC,MAAD,EAAe;AAC5B,aAAO,MAAP;AACD,KAFW,GAEX,EAbG;AAAA,QAcJ,EAAA,GAAA,EAAA,CAAA,UAdI;AAAA,QAcJ,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAdd;AAiBE,QAAA,EAAA,GAAqB,KAAK,CAAV,YAAhB;AAAA,QAAA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,EAAhB;AACR,QAAM,MAAM,GAAG;AACb,MAAA,KAAK,EAAA,KADQ;AAEb,MAAA,MAAM,EAAA;AAFO,KAAf;AAKA,QAAI,MAAM,GAAG,CAAb;AAEA,QAAI,GAAG,GAAG,CAAV;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,UAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV,EAAa,MAAb,CAAoB,UAAC,EAAD,EAAK,EAAL,EAAO;AAAK,eAAA,EAAE,GAAF,EAAA;AAAO,OAAvC,EAAyC,CAAzC,CAAf;;AACA,UAAI,MAAM,GAAG,GAAb,EAAkB;AAChB,QAAA,GAAG,GAAG,MAAN;AACD;AACF;;AAED,QAAI,UAAJ,EAAgB;AACd,MAAA,MAAM,GAAG,GAAT;AACD,KAFD,MAEO;AACL,MAAA,MAAM,GAAG,GAAT;AACD;;AAED,QAAM,UAAU,GAAG,CAAC,UAAD,IAAe,IAAI,CAAC,MAApB,IAA8B,IAAI,CAAC,MAAL,CAAY,MAAZ,IAAsB,CAAvE;AACA,QAAM,UAAU,GAAG,UAAnB;AAEA,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,MAAb;AAAqB,MAAA,KAAK,EAAE,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK,UAAL,CAAe,QAAA,CAAA,QAAA,CAAA,EAAA,EACX,MADW,CAAA,EAEX,KAAK,KAAL,CAAW,WAFA,CAAf,CADH,EAKE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,MAAM,EAAE,MAFV;AAGE,MAAA,EAAE,EAAE,YAHN;AAIE,MAAA,EAAE,EAAE,YAJN;AAKE,MAAA,IAAI,EAAC,0BALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAYE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK,qBAAL,CAA0B,QAAA,CAAA,QAAA,CAAA,EAAA,EACtB,MADsB,CAAA,EAChB;AACT,MAAA,KAAK,EAAE,QADE;AAET,MAAA,UAAU,EAAA,UAFD;AAGT,MAAA,8BAA8B,EAAA;AAHrB,KADgB,CAA1B,CADH,CAZF,EAoBE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAoB,GACjB,KAAK,sBAAL,CAA2B,QAAA,CAAA,QAAA,CAAA,EAAA,EACtB,MADsB,CAAA,EAChB;AACT,MAAA,KAAK,EAAE,QADE;AAET,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,MAAJ,CAFG;AAGT,MAAA,UAAU,EAAA,UAHD;AAIT,MAAA,YAAY,EAAA,YAJH;AAKT,MAAA,aAAa,EAAA,aALJ;AAMT,MAAA,8BAA8B,EAAA,8BANrB;AAOT,MAAA,YAAY,EAAA;AAPH,KADgB,CAA3B,CADiB,GAWjB,IAZN,CApBF,EAkCE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,kBAAkB,GACf,KAAK,oBAAL,CAAyB,QAAA,CAAA,QAAA,CAAA,EAAA,EACpB,MADoB,CAAA,EACd;AACT,MAAA,MAAM,EAAE,IAAI,CAAC,MADJ;AAET,MAAA,YAAY,EAAE,YAAY,GAAG,EAFpB;AAGT,MAAA,UAAU,EAAA,UAHD;AAIT,MAAA,UAAU,EAAA,UAJD;AAKT,MAAA,gBAAgB,EAAE,QALT;AAMT,MAAA,8BAA8B,EAAA;AANrB,KADc,CAAzB,CADe,GAUf,IAXN,CAlCF,EA+CE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK,UAAL,CAAe,QAAA,CAAA,QAAA,CAAA,EAAA,EACX,MADW,CAAA,EACL;AACT,MAAA,IAAI,EAAE,IAAI,CAAC,IADF;AAET,MAAA,MAAM,EAAA,MAFG;AAGT,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,SAHf;AAIT,MAAA,UAAU,EAAA,UAJD;AAKT,MAAA,YAAY,EAAE,YAAY,GAAG,EALpB;AAMT,MAAA,UAAU,EAAA,UAND;AAOT,MAAA,8BAA8B,EAAA;AAPrB,KADK,CAAf,CADH,CA/CF,EA2DG,UAAU,IACT,KAAK,YAAL,CAAiB,QAAA,CAAA,QAAA,CAAA,EAAA,EACZ,MADY,CAAA,EACN;AACT,MAAA,MAAM,EAAE,IAAI,CAAC,MADJ;AAET,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB;AAFf,KADM,CAAjB,CA5DJ,CADF,CADF;AAsED,GArHD;;AAsHF,SAAA,eAAA;AAAC,CAlPD,CAA8B,aAA9B,CAAA;;AAoPA,eAAe,eAAf","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps,\n  DEFAULT_X_LABELS_HEIGHT_PERCENTAGE\n} from \"./AbstractChart\";\n\nexport interface StackedBarChartData {\n  labels: string[];\n  legend: string[];\n  data: number[][];\n  barColors: string[];\n}\n\nexport interface StackedBarChartProps extends AbstractChartProps {\n  /**\n   * E.g.\n   * ```javascript\n   * const data = {\n   *   labels: [\"Test1\", \"Test2\"],\n   *   legend: [\"L1\", \"L2\", \"L3\"],\n   *   data: [[60, 60, 60], [30, 30, 60]],\n   *   barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n   * };\n   * ```\n   */\n  data: StackedBarChartData;\n  width: number;\n  height: number;\n  chartConfig: AbstractChartConfig;\n  hideLegend: boolean;\n  style?: Partial<ViewStyle>;\n  barPercentage?: number;\n  decimalPlaces?: number;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n\n  percentile?: boolean;\n\n  /**\n   * Percentage of the chart height, dedicated to vertical labels\n   * (space below chart)\n   */\n  verticalLabelsHeightPercentage?: number;\n\n  formatYLabel?: (yLabel: string) => string;\n}\n\ntype StackedBarChartState = {};\n\nclass StackedBarChart extends AbstractChart<\n  StackedBarChartProps,\n  StackedBarChartState\n> {\n  getBarPercentage = () => {\n    const { barPercentage = 1 } = this.props.chartConfig;\n    return barPercentage;\n  };\n\n  getBarRadius = (ret: string | any[], x: string | any[]) => {\n    return this.props.chartConfig.barRadius && ret.length === x.length - 1\n      ? this.props.chartConfig.barRadius\n      : 0;\n  };\n\n  renderBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    border,\n    colors,\n    stackedBar = false,\n    verticalLabelsHeightPercentage\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    | \"width\"\n    | \"height\"\n    | \"paddingRight\"\n    | \"paddingTop\"\n    | \"stackedBar\"\n    | \"verticalLabelsHeightPercentage\"\n  > & {\n    border: number;\n    colors: string[];\n    data: number[][];\n  }) =>\n    data.map((x, i) => {\n      const barWidth = 32 * this.getBarPercentage();\n      const ret = [];\n      let h = 0;\n      let st = paddingTop;\n\n      let fac = 1;\n      if (stackedBar) {\n        fac = 0.7;\n      }\n      const sum = this.props.percentile ? x.reduce((a, b) => a + b, 0) : border;\n      const barsAreaHeight = height * verticalLabelsHeightPercentage;\n      for (let z = 0; z < x.length; z++) {\n        h = barsAreaHeight * (x[z] / sum);\n        const y = barsAreaHeight - h + st;\n        const xC =\n          (paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2) *\n          fac;\n\n        ret.push(\n          <Rect\n            key={Math.random()}\n            x={xC}\n            y={y}\n            rx={this.getBarRadius(ret, x)}\n            ry={this.getBarRadius(ret, x)}\n            width={barWidth}\n            height={h}\n            fill={colors[z]}\n          />\n        );\n\n        if (!this.props.hideLegend) {\n          ret.push(\n            <Text\n              key={Math.random()}\n              x={xC + 7 + barWidth / 2}\n              textAnchor=\"end\"\n              y={h > 15 ? y + 15 : y + 7}\n              {...this.getPropsForLabels()}\n            >\n              {x[z]}\n            </Text>\n          );\n        }\n\n        st -= h;\n      }\n\n      return ret;\n    });\n\n  renderLegend = ({\n    legend,\n    colors,\n    width,\n    height\n  }: Pick<AbstractChartConfig, \"width\" | \"height\"> & {\n    legend: string[];\n    colors: string[];\n  }) =>\n    legend.map((x, i) => {\n      return (\n        <G key={Math.random()}>\n          <Rect\n            width=\"16px\"\n            height=\"16px\"\n            fill={colors[i]}\n            rx={8}\n            ry={8}\n            x={width * 0.71}\n            y={height * 0.7 - i * 50}\n          />\n          <Text\n            x={width * 0.78}\n            y={height * 0.76 - i * 50}\n            {...this.getPropsForLabels()}\n          >\n            {x}\n          </Text>\n        </G>\n      );\n    });\n\n  render() {\n    const paddingTop = 15;\n    const paddingRight = 50;\n    const barWidth = 32 * this.getBarPercentage();\n\n    const {\n      width,\n      height,\n      style = {},\n      data,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      segments = 4,\n      decimalPlaces,\n      percentile = false,\n      verticalLabelsHeightPercentage = DEFAULT_X_LABELS_HEIGHT_PERCENTAGE,\n      formatYLabel = (yLabel: string) => {\n        return yLabel;\n      },\n      hideLegend = false\n    } = this.props;\n\n    const { borderRadius = 0 } = style;\n    const config = {\n      width,\n      height\n    };\n\n    let border = 0;\n\n    let max = 0;\n    for (let i = 0; i < data.data.length; i++) {\n      const actual = data.data[i].reduce((pv, cv) => pv + cv, 0);\n      if (actual > max) {\n        max = actual;\n      }\n    }\n\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n\n    const showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    const stackedBar = showLegend;\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {this.renderHorizontalLines({\n              ...config,\n              count: segments,\n              paddingTop,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                  ...config,\n                  count: segments,\n                  data: [0, border],\n                  paddingTop,\n                  paddingRight,\n                  decimalPlaces,\n                  verticalLabelsHeightPercentage,\n                  formatYLabel\n                })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                  ...config,\n                  labels: data.labels,\n                  paddingRight: paddingRight + 28,\n                  stackedBar,\n                  paddingTop,\n                  horizontalOffset: barWidth,\n                  verticalLabelsHeightPercentage\n                })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.data,\n              border,\n              colors: this.props.data.barColors,\n              paddingTop,\n              paddingRight: paddingRight + 20,\n              stackedBar,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          {showLegend &&\n            this.renderLegend({\n              ...config,\n              legend: data.legend,\n              colors: this.props.data.barColors\n            })}\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default StackedBarChart;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}