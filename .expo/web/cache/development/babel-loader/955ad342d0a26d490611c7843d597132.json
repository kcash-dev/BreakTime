{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-chart-kit/dist/line-chart/LineChart.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport React from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Circle, G, Path, Polygon, Polyline, Rect, Svg } from \"react-native-svg\";\nimport AbstractChart from \"../AbstractChart\";\nimport { LegendItem } from \"./LegendItem\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nvar LineChart = function (_super) {\n  __extends(LineChart, _super);\n\n  function LineChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.label = React.createRef();\n    _this.state = {\n      scrollableDotHorizontalOffset: new Animated.Value(0)\n    };\n\n    _this.getColor = function (dataset, opacity) {\n      return (dataset.color || _this.props.chartConfig.color)(opacity);\n    };\n\n    _this.getStrokeWidth = function (dataset) {\n      return dataset.strokeWidth || _this.props.chartConfig.strokeWidth || 3;\n    };\n\n    _this.getDatas = function (data) {\n      return data.reduce(function (acc, item) {\n        return item.data ? __spreadArrays(acc, item.data) : acc;\n      }, []);\n    };\n\n    _this.getPropsForDots = function (x, i) {\n      var _a = _this.props,\n          getDotProps = _a.getDotProps,\n          chartConfig = _a.chartConfig;\n\n      if (typeof getDotProps === \"function\") {\n        return getDotProps(x, i);\n      }\n\n      var _b = chartConfig.propsForDots,\n          propsForDots = _b === void 0 ? {} : _b;\n      return __assign({\n        r: \"4\"\n      }, propsForDots);\n    };\n\n    _this.renderDots = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          onDataPointClick = _a.onDataPointClick;\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var _b = _this.props,\n          getDotColor = _b.getDotColor,\n          _c = _b.hidePointsAtIndex,\n          hidePointsAtIndex = _c === void 0 ? [] : _c,\n          _d = _b.renderDotContent,\n          renderDotContent = _d === void 0 ? function () {\n        return null;\n      } : _d;\n      data.forEach(function (dataset) {\n        if (dataset.withDots == false) return;\n        dataset.data.forEach(function (x, i) {\n          if (hidePointsAtIndex.includes(i)) {\n            return;\n          }\n\n          var cx = paddingRight + i * (width - paddingRight) / dataset.data.length;\n          var cy = (baseHeight - _this.calcHeight(x, datas, height)) / 4 * 3 + paddingTop;\n\n          var onPress = function onPress() {\n            if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n              return;\n            }\n\n            onDataPointClick({\n              index: i,\n              value: x,\n              dataset: dataset,\n              x: cx,\n              y: cy,\n              getColor: function getColor(opacity) {\n                return _this.getColor(dataset, opacity);\n              }\n            });\n          };\n\n          output.push(React.createElement(Circle, _extends({\n            key: Math.random(),\n            cx: cx,\n            cy: cy,\n            fill: typeof getDotColor === \"function\" ? getDotColor(x, i) : _this.getColor(dataset, 0.9),\n            onPress: onPress\n          }, _this.getPropsForDots(x, i), {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }\n          })), React.createElement(Circle, {\n            key: Math.random(),\n            cx: cx,\n            cy: cy,\n            r: \"14\",\n            fill: \"#fff\",\n            fillOpacity: 0,\n            onPress: onPress,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 111\n            }\n          }), renderDotContent({\n            x: cx,\n            y: cy,\n            index: i,\n            indexData: x\n          }));\n        });\n      });\n      return output;\n    };\n\n    _this.renderScrollableDot = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          scrollableDotHorizontalOffset = _a.scrollableDotHorizontalOffset,\n          scrollableDotFill = _a.scrollableDotFill,\n          scrollableDotStrokeColor = _a.scrollableDotStrokeColor,\n          scrollableDotStrokeWidth = _a.scrollableDotStrokeWidth,\n          scrollableDotRadius = _a.scrollableDotRadius,\n          scrollableInfoViewStyle = _a.scrollableInfoViewStyle,\n          scrollableInfoTextStyle = _a.scrollableInfoTextStyle,\n          _b = _a.scrollableInfoTextDecorator,\n          scrollableInfoTextDecorator = _b === void 0 ? function (x) {\n        return \"\" + x;\n      } : _b,\n          scrollableInfoSize = _a.scrollableInfoSize,\n          scrollableInfoOffset = _a.scrollableInfoOffset;\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var vl = [];\n      var perData = width / data[0].data.length;\n\n      for (var index = 0; index < data[0].data.length; index++) {\n        vl.push(index * perData);\n      }\n\n      var lastIndex;\n      scrollableDotHorizontalOffset.addListener(function (value) {\n        var index = value.value / perData;\n\n        if (!lastIndex) {\n          lastIndex = index;\n        }\n\n        var abs = Math.floor(index);\n        var percent = index - abs;\n        abs = data[0].data.length - abs - 1;\n\n        if (index >= data[0].data.length - 1) {\n          _this.label.current.setNativeProps({\n            text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n          });\n        } else {\n          if (index > lastIndex) {\n            var base = data[0].data[abs];\n            var prev = data[0].data[abs - 1];\n\n            if (prev > base) {\n              var rest = prev - base;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - prev;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          } else {\n            var base = data[0].data[abs - 1];\n            var next = data[0].data[abs];\n            percent = 1 - percent;\n\n            if (next > base) {\n              var rest = next - base;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - next;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          }\n        }\n\n        lastIndex = index;\n      });\n      data.forEach(function (dataset) {\n        if (dataset.withScrollableDot == false) return;\n        var perData = width / dataset.data.length;\n        var values = [];\n        var yValues = [];\n        var xValues = [];\n        var yValuesLabel = [];\n        var xValuesLabel = [];\n\n        for (var index = 0; index < dataset.data.length; index++) {\n          values.push(index * perData);\n          var yval = (baseHeight - _this.calcHeight(dataset.data[dataset.data.length - index - 1], datas, height)) / 4 * 3 + paddingTop;\n          yValues.push(yval);\n          var xval = paddingRight + (dataset.data.length - index - 1) * (width - paddingRight) / dataset.data.length;\n          xValues.push(xval);\n          yValuesLabel.push(yval - (scrollableInfoSize.height + scrollableInfoOffset));\n          xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n        }\n\n        var translateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValues,\n          extrapolate: \"clamp\"\n        });\n        var translateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValues,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        output.push([React.createElement(Animated.View, {\n          key: Math.random(),\n          style: [scrollableInfoViewStyle, {\n            transform: [{\n              translateX: labelTranslateX\n            }, {\n              translateY: labelTranslateY\n            }],\n            width: scrollableInfoSize.width,\n            height: scrollableInfoSize.height\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }\n        }, React.createElement(TextInput, {\n          onLayout: function onLayout() {\n            _this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(Math.floor(data[0].data[data[0].data.length - 1]))\n            });\n          },\n          style: scrollableInfoTextStyle,\n          ref: _this.label,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 11\n          }\n        })), React.createElement(AnimatedCircle, {\n          key: Math.random(),\n          cx: translateX,\n          cy: translateY,\n          r: scrollableDotRadius,\n          stroke: scrollableDotStrokeColor,\n          strokeWidth: scrollableDotStrokeWidth,\n          fill: scrollableDotFill,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 21\n          }\n        })]);\n      });\n      return output;\n    };\n\n    _this.renderShadow = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          useColorFromDataset = _a.useColorFromDataset;\n\n      if (_this.props.bezier) {\n        return _this.renderBezierShadow({\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data,\n          useColorFromDataset: useColorFromDataset\n        });\n      }\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      return data.map(function (dataset, index) {\n        return React.createElement(Polygon, {\n          key: index,\n          points: dataset.data.map(function (d, i) {\n            var x = paddingRight + i * (width - paddingRight) / dataset.data.length;\n            var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n            return x + \",\" + y;\n          }).join(\" \") + (\" \" + (paddingRight + (width - paddingRight) / dataset.data.length * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" \" + paddingRight + \",\" + (height / 4 * 3 + paddingTop)),\n          fill: \"url(#fillShadowGradient\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }\n        });\n      });\n    };\n\n    _this.renderLine = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          linejoinType = _a.linejoinType;\n\n      if (_this.props.bezier) {\n        return _this.renderBezierLine({\n          data: data,\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop\n        });\n      }\n\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var lastPoint;\n      data.forEach(function (dataset, index) {\n        var points = dataset.data.map(function (d, i) {\n          if (d === null) return lastPoint;\n          var x = i * (width - paddingRight) / dataset.data.length + paddingRight;\n          var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n          lastPoint = x + \",\" + y;\n          return x + \",\" + y;\n        });\n        output.push(React.createElement(Polyline, {\n          key: index,\n          strokeLinejoin: linejoinType,\n          points: points.join(\" \"),\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 29\n          }\n        }));\n      });\n      return output;\n    };\n\n    _this.getBezierLinePoints = function (dataset, _a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data;\n\n      if (dataset.data.length === 0) {\n        return \"M0,0\";\n      }\n\n      var datas = _this.getDatas(data);\n\n      var x = function x(i) {\n        return Math.floor(paddingRight + i * (width - paddingRight) / dataset.data.length);\n      };\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var y = function y(i) {\n        var yHeight = _this.calcHeight(dataset.data[i], datas, height);\n\n        return Math.floor((baseHeight - yHeight) / 4 * 3 + paddingTop);\n      };\n\n      return [\"M\" + x(0) + \",\" + y(0)].concat(dataset.data.slice(0, -1).map(function (_, i) {\n        var x_mid = (x(i) + x(i + 1)) / 2;\n        var y_mid = (y(i) + y(i + 1)) / 2;\n        var cp_x1 = (x_mid + x(i)) / 2;\n        var cp_x2 = (x_mid + x(i + 1)) / 2;\n        return \"Q \" + cp_x1 + \", \" + y(i) + \", \" + x_mid + \", \" + y_mid + (\" Q \" + cp_x2 + \", \" + y(i + 1) + \", \" + x(i + 1) + \", \" + y(i + 1));\n      })).join(\" \");\n    };\n\n    _this.renderBezierLine = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop;\n      return data.map(function (dataset, index) {\n        var result = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        });\n\n        return React.createElement(Path, {\n          key: index,\n          d: result,\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }\n        });\n      });\n    };\n\n    _this.renderBezierShadow = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          useColorFromDataset = _a.useColorFromDataset;\n      return data.map(function (dataset, index) {\n        var d = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        }) + (\" L\" + (paddingRight + (width - paddingRight) / dataset.data.length * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" L\" + paddingRight + \",\" + (height / 4 * 3 + paddingTop) + \" Z\");\n        return React.createElement(Path, {\n          key: index,\n          d: d,\n          fill: \"url(#fillShadowGradient\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }\n        });\n      });\n    };\n\n    _this.renderLegend = function (width, legendOffset) {\n      var _a = _this.props.data,\n          legend = _a.legend,\n          datasets = _a.datasets;\n      var baseLegendItemX = width / (legend.length + 1);\n      return legend.map(function (legendItem, i) {\n        return React.createElement(G, {\n          key: Math.random(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 66\n          }\n        }, React.createElement(LegendItem, {\n          index: i,\n          iconColor: _this.getColor(datasets[i], 0.9),\n          baseLegendItemX: baseLegendItemX,\n          legendText: legendItem,\n          labelProps: __assign({}, _this.getPropsForLabels()),\n          legendOffset: legendOffset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 9\n          }\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  LineChart.prototype.render = function () {\n    var _a = this.props,\n        width = _a.width,\n        height = _a.height,\n        data = _a.data,\n        _b = _a.withScrollableDot,\n        withScrollableDot = _b === void 0 ? false : _b,\n        _c = _a.withShadow,\n        withShadow = _c === void 0 ? true : _c,\n        _d = _a.withDots,\n        withDots = _d === void 0 ? true : _d,\n        _e = _a.withInnerLines,\n        withInnerLines = _e === void 0 ? true : _e,\n        _f = _a.withOuterLines,\n        withOuterLines = _f === void 0 ? true : _f,\n        _g = _a.withHorizontalLines,\n        withHorizontalLines = _g === void 0 ? true : _g,\n        _h = _a.withVerticalLines,\n        withVerticalLines = _h === void 0 ? true : _h,\n        _j = _a.withHorizontalLabels,\n        withHorizontalLabels = _j === void 0 ? true : _j,\n        _k = _a.withVerticalLabels,\n        withVerticalLabels = _k === void 0 ? true : _k,\n        _l = _a.style,\n        style = _l === void 0 ? {} : _l,\n        decorator = _a.decorator,\n        onDataPointClick = _a.onDataPointClick,\n        _m = _a.verticalLabelRotation,\n        verticalLabelRotation = _m === void 0 ? 0 : _m,\n        _o = _a.horizontalLabelRotation,\n        horizontalLabelRotation = _o === void 0 ? 0 : _o,\n        _p = _a.formatYLabel,\n        formatYLabel = _p === void 0 ? function (yLabel) {\n      return yLabel;\n    } : _p,\n        _q = _a.formatXLabel,\n        formatXLabel = _q === void 0 ? function (xLabel) {\n      return xLabel;\n    } : _q,\n        segments = _a.segments,\n        _r = _a.transparent,\n        transparent = _r === void 0 ? false : _r,\n        chartConfig = _a.chartConfig;\n    var scrollableDotHorizontalOffset = this.state.scrollableDotHorizontalOffset;\n    var _s = data.labels,\n        labels = _s === void 0 ? [] : _s;\n    var _t = style.borderRadius,\n        borderRadius = _t === void 0 ? 0 : _t,\n        _u = style.paddingTop,\n        paddingTop = _u === void 0 ? 16 : _u,\n        _v = style.paddingRight,\n        paddingRight = _v === void 0 ? 64 : _v,\n        _w = style.margin,\n        margin = _w === void 0 ? 0 : _w,\n        _x = style.marginRight,\n        marginRight = _x === void 0 ? 0 : _x,\n        _y = style.paddingBottom,\n        paddingBottom = _y === void 0 ? 0 : _y;\n    var config = {\n      width: width,\n      height: height,\n      verticalLabelRotation: verticalLabelRotation,\n      horizontalLabelRotation: horizontalLabelRotation\n    };\n    var datas = this.getDatas(data.datasets);\n    var count = Math.min.apply(Math, datas) === Math.max.apply(Math, datas) ? 1 : 4;\n\n    if (segments) {\n      count = segments;\n    }\n\n    var legendOffset = this.props.data.legend ? height * 0.15 : 0;\n    return React.createElement(View, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }\n    }, React.createElement(Svg, {\n      height: height + paddingBottom + legendOffset,\n      width: width - margin * 2 - marginRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }, React.createElement(Rect, {\n      width: \"100%\",\n      height: height + legendOffset,\n      rx: borderRadius,\n      ry: borderRadius,\n      fill: \"url(#backgroundGradient)\",\n      fillOpacity: transparent ? 0 : 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }\n    }), this.props.data.legend && this.renderLegend(config.width, legendOffset), React.createElement(G, {\n      x: \"0\",\n      y: legendOffset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }\n    }, this.renderDefs(__assign(__assign(__assign({}, config), chartConfig), {\n      data: data.datasets\n    })), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }\n    }, withHorizontalLines && (withInnerLines ? this.renderHorizontalLines(__assign(__assign({}, config), {\n      count: count,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight\n    })) : withOuterLines ? this.renderHorizontalLine(__assign(__assign({}, config), {\n      paddingTop: paddingTop,\n      paddingRight: paddingRight\n    })) : null)), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    }, withHorizontalLabels && this.renderHorizontalLabels(__assign(__assign({}, config), {\n      count: count,\n      data: datas,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight,\n      formatYLabel: formatYLabel,\n      decimalPlaces: chartConfig.decimalPlaces\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 13\n      }\n    }, withVerticalLines && (withInnerLines ? this.renderVerticalLines(__assign(__assign({}, config), {\n      data: data.datasets[0].data,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight\n    })) : withOuterLines ? this.renderVerticalLine(__assign(__assign({}, config), {\n      paddingTop: paddingTop,\n      paddingRight: paddingRight\n    })) : null)), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, withVerticalLabels && this.renderVerticalLabels(__assign(__assign({}, config), {\n      labels: labels,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight,\n      formatXLabel: formatXLabel\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, this.renderLine(__assign(__assign(__assign({}, config), chartConfig), {\n      paddingRight: paddingRight,\n      paddingTop: paddingTop,\n      data: data.datasets\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 13\n      }\n    }, withShadow && this.renderShadow(__assign(__assign({}, config), {\n      data: data.datasets,\n      paddingRight: paddingRight,\n      paddingTop: paddingTop,\n      useColorFromDataset: chartConfig.useShadowColorFromDataset\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    }, withDots && this.renderDots(__assign(__assign({}, config), {\n      data: data.datasets,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight,\n      onDataPointClick: onDataPointClick\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 13\n      }\n    }, withScrollableDot && this.renderScrollableDot(__assign(__assign(__assign({}, config), chartConfig), {\n      data: data.datasets,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight,\n      onDataPointClick: onDataPointClick,\n      scrollableDotHorizontalOffset: scrollableDotHorizontalOffset\n    }))), React.createElement(G, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 13\n      }\n    }, decorator && decorator(__assign(__assign({}, config), {\n      data: data.datasets,\n      paddingTop: paddingTop,\n      paddingRight: paddingRight\n    }))))), withScrollableDot && React.createElement(ScrollView, {\n      style: StyleSheet.absoluteFill,\n      contentContainerStyle: {\n        width: width * 2\n      },\n      showsHorizontalScrollIndicator: false,\n      scrollEventThrottle: 16,\n      onScroll: Animated.event([{\n        nativeEvent: {\n          contentOffset: {\n            x: scrollableDotHorizontalOffset\n          }\n        }\n      }]),\n      horizontal: true,\n      bounces: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 32\n      }\n    }));\n  };\n\n  return LineChart;\n}(AbstractChart);\n\nexport default LineChart;","map":{"version":3,"sources":["../../src/line-chart/LineChart.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Animated,\n  ScrollView,\n  StyleSheet,\n  TextInput,\n  View,\n  ViewStyle\n} from \"react-native\";\nimport {\n  Circle,\n  G,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Svg\n} from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps\n} from \"../AbstractChart\";\nimport { ChartData, Dataset } from \"../HelperTypes\";\nimport { LegendItem } from \"./LegendItem\";\n\nlet AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport interface LineChartData extends ChartData {\n  legend?: string[];\n}\n\nexport interface LineChartProps extends AbstractChartProps {\n  /**\n   * Data for the chart.\n   *\n   * Example from [docs](https://github.com/indiespirit/react-native-chart-kit#line-chart):\n   *\n   * ```javascript\n   * const data = {\n   *   labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n   *   datasets: [{\n   *     data: [ 20, 45, 28, 80, 99, 43 ],\n   *     color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\n   *     strokeWidth: 2 // optional\n   *   }],\n   *   legend: [\"Rainy Days\", \"Sunny Days\", \"Snowy Days\"] // optional\n   * }\n   * ```\n   */\n  data: LineChartData;\n  /**\n   * Width of the chart, use 'Dimensions' library to get the width of your screen for responsive.\n   */\n  width: number;\n  /**\n   * Height of the chart.\n   */\n  height: number;\n  /**\n   * Show dots on the line - default: True.\n   */\n  withDots?: boolean;\n  /**\n   * Show shadow for line - default: True.\n   */\n  withShadow?: boolean;\n  /**\n   * Show inner dashed lines - default: True.\n   */\n\n  withScrollableDot?: boolean;\n  withInnerLines?: boolean;\n  /**\n   * Show outer dashed lines - default: True.\n   */\n  withOuterLines?: boolean;\n  /**\n   * Show vertical lines - default: True.\n   */\n  withVerticalLines?: boolean;\n  /**\n   * Show horizontal lines - default: True.\n   */\n  withHorizontalLines?: boolean;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * Render charts from 0 not from the minimum value. - default: False.\n   */\n  fromZero?: boolean;\n  /**\n   * Prepend text to horizontal labels -- default: ''.\n   */\n  yAxisLabel?: string;\n  /**\n   * Append text to horizontal labels -- default: ''.\n   */\n  yAxisSuffix?: string;\n  /**\n   * Prepend text to vertical labels -- default: ''.\n   */\n  xAxisLabel?: string;\n  /**\n   * Configuration object for the chart, see example:\n   *\n   * ```javascript\n   * const chartConfig = {\n   *   backgroundGradientFrom: \"#1E2923\",\n   *   backgroundGradientFromOpacity: 0,\n   *   backgroundGradientTo: \"#08130D\",\n   *   backgroundGradientToOpacity: 0.5,\n   *   color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   labelColor: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   strokeWidth: 2, // optional, default 3\n   *   barPercentage: 0.5\n   * };\n   * ```\n   */\n  chartConfig?: AbstractChartConfig;\n\n  /**\n   * Divide axis quantity by the input number -- default: 1.\n   */\n  yAxisInterval?: number;\n\n  /**\n   * Defines if chart is transparent\n   */\n  transparent?: boolean;\n  /**\n   * This function takes a [whole bunch](https://github.com/indiespirit/react-native-chart-kit/blob/master/src/line-chart.js#L266)\n   * of stuff and can render extra elements,\n   * such as data point info or additional markup.\n   */\n  decorator?: Function;\n  /**\n   * Callback that is called when a data point is clicked.\n   */\n  onDataPointClick?: (data: {\n    index: number;\n    value: number;\n    dataset: Dataset;\n    x: number;\n    y: number;\n    getColor: (opacity: number) => string;\n  }) => void;\n  /**\n   * Style of the container view of the chart.\n   */\n  style?: Partial<ViewStyle>;\n  /**\n   * Add this prop to make the line chart smooth and curvy.\n   *\n   * [Example](https://github.com/indiespirit/react-native-chart-kit#bezier-line-chart)\n   */\n  bezier?: boolean;\n  /**\n   * Defines the dot color function that is used to calculate colors of dots in a line chart.\n   * Takes `(dataPoint, dataPointIndex)` as arguments.\n   */\n  getDotColor?: (dataPoint: any, index: number) => string;\n  /**\n   * Renders additional content for dots in a line chart.\n   * Takes `({x, y, index})` as arguments.\n   */\n  renderDotContent?: (params: {\n    x: number;\n    y: number;\n    index: number;\n    indexData: number;\n  }) => React.ReactNode;\n  /**\n   * Rotation angle of the horizontal labels - default 0 (degrees).\n   */\n  horizontalLabelRotation?: number;\n  /**\n   * Rotation angle of the vertical labels - default 0 (degrees).\n   */\n  verticalLabelRotation?: number;\n  /**\n   * Offset for Y axis labels.\n   */\n  yLabelsOffset?: number;\n  /**\n   * Offset for X axis labels.\n   */\n  xLabelsOffset?: number;\n  /**\n   * Array of indices of the data points you don't want to display.\n   */\n  hidePointsAtIndex?: number[];\n  /**\n   * This function change the format of the display value of the Y label.\n   * Takes the y value as argument and should return the desirable string.\n   */\n  formatYLabel?: (yValue: string) => string;\n  /**\n   * This function change the format of the display value of the X label.\n   * Takes the X value as argument and should return the desirable string.\n   */\n  formatXLabel?: (xValue: string) => string;\n  /**\n   * Provide props for a data point dot.\n   */\n  getDotProps?: (dataPoint: any, index: number) => object;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n}\n\ntype LineChartState = {\n  scrollableDotHorizontalOffset: Animated.Value;\n};\n\nclass LineChart extends AbstractChart<LineChartProps, LineChartState> {\n  label = React.createRef<TextInput>();\n\n  state = {\n    scrollableDotHorizontalOffset: new Animated.Value(0)\n  };\n\n  getColor = (dataset: Dataset, opacity: number) => {\n    return (dataset.color || this.props.chartConfig.color)(opacity);\n  };\n\n  getStrokeWidth = (dataset: Dataset) => {\n    return dataset.strokeWidth || this.props.chartConfig.strokeWidth || 3;\n  };\n\n  getDatas = (data: Dataset[]): number[] => {\n    return data.reduce(\n      (acc, item) => (item.data ? [...acc, ...item.data] : acc),\n      []\n    );\n  };\n\n  getPropsForDots = (x: any, i: number) => {\n    const { getDotProps, chartConfig } = this.props;\n\n    if (typeof getDotProps === \"function\") {\n      return getDotProps(x, i);\n    }\n\n    const { propsForDots = {} } = chartConfig;\n\n    return { r: \"4\", ...propsForDots };\n  };\n\n  renderDots = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    onDataPointClick\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n  }) => {\n    const output: ReactNode[] = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const {\n      getDotColor,\n      hidePointsAtIndex = [],\n      renderDotContent = () => {\n        return null;\n      }\n    } = this.props;\n\n    data.forEach(dataset => {\n      if (dataset.withDots == false) return;\n\n      dataset.data.forEach((x, i) => {\n        if (hidePointsAtIndex.includes(i)) {\n          return;\n        }\n\n        const cx =\n          paddingRight + (i * (width - paddingRight)) / dataset.data.length;\n\n        const cy =\n          ((baseHeight - this.calcHeight(x, datas, height)) / 4) * 3 +\n          paddingTop;\n\n        const onPress = () => {\n          if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n            return;\n          }\n\n          onDataPointClick({\n            index: i,\n            value: x,\n            dataset,\n            x: cx,\n            y: cy,\n            getColor: opacity => this.getColor(dataset, opacity)\n          });\n        };\n\n        output.push(\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            fill={\n              typeof getDotColor === \"function\"\n                ? getDotColor(x, i)\n                : this.getColor(dataset, 0.9)\n            }\n            onPress={onPress}\n            {...this.getPropsForDots(x, i)}\n          />,\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            r=\"14\"\n            fill=\"#fff\"\n            fillOpacity={0}\n            onPress={onPress}\n          />,\n          renderDotContent({ x: cx, y: cy, index: i, indexData: x })\n        );\n      });\n    });\n\n    return output;\n  };\n\n  renderScrollableDot = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    scrollableDotHorizontalOffset,\n    scrollableDotFill,\n    scrollableDotStrokeColor,\n    scrollableDotStrokeWidth,\n    scrollableDotRadius,\n    scrollableInfoViewStyle,\n    scrollableInfoTextStyle,\n    scrollableInfoTextDecorator = x => `${x}`,\n    scrollableInfoSize,\n    scrollableInfoOffset\n  }: AbstractChartConfig & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n    scrollableDotHorizontalOffset: Animated.Value;\n  }) => {\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    let vl: number[] = [];\n\n    const perData = width / data[0].data.length;\n    for (let index = 0; index < data[0].data.length; index++) {\n      vl.push(index * perData);\n    }\n    let lastIndex: number;\n\n    scrollableDotHorizontalOffset.addListener(value => {\n      const index = value.value / perData;\n      if (!lastIndex) {\n        lastIndex = index;\n      }\n\n      let abs = Math.floor(index);\n      let percent = index - abs;\n      abs = data[0].data.length - abs - 1;\n\n      if (index >= data[0].data.length - 1) {\n        this.label.current.setNativeProps({\n          text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n        });\n      } else {\n        if (index > lastIndex) {\n          // to right\n\n          const base = data[0].data[abs];\n          const prev = data[0].data[abs - 1];\n          if (prev > base) {\n            let rest = prev - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - prev;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        } else {\n          // to left\n\n          const base = data[0].data[abs - 1];\n          const next = data[0].data[abs];\n          percent = 1 - percent;\n          if (next > base) {\n            let rest = next - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - next;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        }\n      }\n      lastIndex = index;\n    });\n\n    data.forEach(dataset => {\n      if (dataset.withScrollableDot == false) return;\n\n      const perData = width / dataset.data.length;\n      let values = [];\n      let yValues = [];\n      let xValues = [];\n\n      let yValuesLabel = [];\n      let xValuesLabel = [];\n\n      for (let index = 0; index < dataset.data.length; index++) {\n        values.push(index * perData);\n        const yval =\n          ((baseHeight -\n            this.calcHeight(\n              dataset.data[dataset.data.length - index - 1],\n              datas,\n              height\n            )) /\n            4) *\n            3 +\n          paddingTop;\n        yValues.push(yval);\n        const xval =\n          paddingRight +\n          ((dataset.data.length - index - 1) * (width - paddingRight)) /\n            dataset.data.length;\n        xValues.push(xval);\n\n        yValuesLabel.push(\n          yval - (scrollableInfoSize.height + scrollableInfoOffset)\n        );\n        xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n      }\n\n      const translateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValues,\n        extrapolate: \"clamp\"\n      });\n\n      const translateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValues,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      output.push([\n        <Animated.View\n          key={Math.random()}\n          style={[\n            scrollableInfoViewStyle,\n            {\n              transform: [\n                { translateX: labelTranslateX },\n                { translateY: labelTranslateY }\n              ],\n              width: scrollableInfoSize.width,\n              height: scrollableInfoSize.height\n            }\n          ]}\n        >\n          <TextInput\n            onLayout={() => {\n              this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(\n                  Math.floor(data[0].data[data[0].data.length - 1])\n                )\n              });\n            }}\n            style={scrollableInfoTextStyle}\n            ref={this.label}\n          />\n        </Animated.View>,\n        <AnimatedCircle\n          key={Math.random()}\n          cx={translateX}\n          cy={translateY}\n          r={scrollableDotRadius}\n          stroke={scrollableDotStrokeColor}\n          strokeWidth={scrollableDotStrokeWidth}\n          fill={scrollableDotFill}\n        />\n      ]);\n    });\n\n    return output;\n  };\n\n  renderShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) => {\n    if (this.props.bezier) {\n      return this.renderBezierShadow({\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data,\n        useColorFromDataset\n      });\n    }\n\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    return data.map((dataset, index) => {\n      return (\n        <Polygon\n          key={index}\n          points={\n            dataset.data\n              .map((d, i) => {\n                const x =\n                  paddingRight +\n                  (i * (width - paddingRight)) / dataset.data.length;\n\n                const y =\n                  ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n                  paddingTop;\n\n                return `${x},${y}`;\n              })\n              .join(\" \") +\n            ` ${paddingRight +\n              ((width - paddingRight) / dataset.data.length) *\n                (dataset.data.length - 1)},${(height / 4) * 3 +\n              paddingTop} ${paddingRight},${(height / 4) * 3 + paddingTop}`\n          }\n          fill={`url(#fillShadowGradient${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n  };\n\n  renderLine = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    linejoinType\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"linejoinType\"\n  >) => {\n    if (this.props.bezier) {\n      return this.renderBezierLine({\n        data,\n        width,\n        height,\n        paddingRight,\n        paddingTop\n      });\n    }\n\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    let lastPoint: string;\n\n    data.forEach((dataset, index) => {\n      const points = dataset.data.map((d, i) => {\n        if (d === null) return lastPoint;\n        const x =\n          (i * (width - paddingRight)) / dataset.data.length + paddingRight;\n        const y =\n          ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n          paddingTop;\n        lastPoint = `${x},${y}`;\n        return `${x},${y}`;\n      });\n\n      output.push(\n        <Polyline\n          key={index}\n          strokeLinejoin={linejoinType}\n          points={points.join(\" \")}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n\n    return output;\n  };\n\n  getBezierLinePoints = (\n    dataset: Dataset,\n    {\n      width,\n      height,\n      paddingRight,\n      paddingTop,\n      data\n    }: Pick<\n      AbstractChartConfig,\n      \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"data\"\n    >\n  ) => {\n    if (dataset.data.length === 0) {\n      return \"M0,0\";\n    }\n\n    const datas = this.getDatas(data);\n\n    const x = (i: number) =>\n      Math.floor(\n        paddingRight + (i * (width - paddingRight)) / dataset.data.length\n      );\n\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const y = (i: number) => {\n      const yHeight = this.calcHeight(dataset.data[i], datas, height);\n\n      return Math.floor(((baseHeight - yHeight) / 4) * 3 + paddingTop);\n    };\n\n    return [`M${x(0)},${y(0)}`]\n      .concat(\n        dataset.data.slice(0, -1).map((_, i) => {\n          const x_mid = (x(i) + x(i + 1)) / 2;\n          const y_mid = (y(i) + y(i + 1)) / 2;\n          const cp_x1 = (x_mid + x(i)) / 2;\n          const cp_x2 = (x_mid + x(i + 1)) / 2;\n          return (\n            `Q ${cp_x1}, ${y(i)}, ${x_mid}, ${y_mid}` +\n            ` Q ${cp_x2}, ${y(i + 1)}, ${x(i + 1)}, ${y(i + 1)}`\n          );\n        })\n      )\n      .join(\" \");\n  };\n\n  renderBezierLine = ({\n    data,\n    width,\n    height,\n    paddingRight,\n    paddingTop\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  >) => {\n    return data.map((dataset, index) => {\n      const result = this.getBezierLinePoints(dataset, {\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data\n      });\n\n      return (\n        <Path\n          key={index}\n          d={result}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n  };\n\n  renderBezierShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) =>\n    data.map((dataset, index) => {\n      const d =\n        this.getBezierLinePoints(dataset, {\n          width,\n          height,\n          paddingRight,\n          paddingTop,\n          data\n        }) +\n        ` L${paddingRight +\n          ((width - paddingRight) / dataset.data.length) *\n            (dataset.data.length - 1)},${(height / 4) * 3 +\n          paddingTop} L${paddingRight},${(height / 4) * 3 + paddingTop} Z`;\n\n      return (\n        <Path\n          key={index}\n          d={d}\n          fill={`url(#fillShadowGradient${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n\n  renderLegend = (width, legendOffset) => {\n    const { legend, datasets } = this.props.data;\n    const baseLegendItemX = width / (legend.length + 1);\n\n    return legend.map((legendItem, i) => (\n      <G key={Math.random()}>\n        <LegendItem\n          index={i}\n          iconColor={this.getColor(datasets[i], 0.9)}\n          baseLegendItemX={baseLegendItemX}\n          legendText={legendItem}\n          labelProps={{ ...this.getPropsForLabels() }}\n          legendOffset={legendOffset}\n        />\n      </G>\n    ));\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      withScrollableDot = false,\n      withShadow = true,\n      withDots = true,\n      withInnerLines = true,\n      withOuterLines = true,\n      withHorizontalLines = true,\n      withVerticalLines = true,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      style = {},\n      decorator,\n      onDataPointClick,\n      verticalLabelRotation = 0,\n      horizontalLabelRotation = 0,\n      formatYLabel = yLabel => yLabel,\n      formatXLabel = xLabel => xLabel,\n      segments,\n      transparent = false,\n      chartConfig\n    } = this.props;\n\n    const { scrollableDotHorizontalOffset } = this.state;\n    const { labels = [] } = data;\n    const {\n      borderRadius = 0,\n      paddingTop = 16,\n      paddingRight = 64,\n      margin = 0,\n      marginRight = 0,\n      paddingBottom = 0\n    } = style;\n\n    const config = {\n      width,\n      height,\n      verticalLabelRotation,\n      horizontalLabelRotation\n    };\n\n    const datas = this.getDatas(data.datasets);\n\n    let count = Math.min(...datas) === Math.max(...datas) ? 1 : 4;\n    if (segments) {\n      count = segments;\n    }\n\n    const legendOffset = this.props.data.legend ? height * 0.15 : 0;\n\n    return (\n      <View style={style}>\n        <Svg\n          height={height + (paddingBottom as number) + legendOffset}\n          width={width - (margin as number) * 2 - (marginRight as number)}\n        >\n          <Rect\n            width=\"100%\"\n            height={height + legendOffset}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n            fillOpacity={transparent ? 0 : 1}\n          />\n          {this.props.data.legend &&\n            this.renderLegend(config.width, legendOffset)}\n          <G x=\"0\" y={legendOffset}>\n            {this.renderDefs({\n              ...config,\n              ...chartConfig,\n              data: data.datasets\n            })}\n            <G>\n              {withHorizontalLines &&\n                (withInnerLines\n                  ? this.renderHorizontalLines({\n                      ...config,\n                      count: count,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : withOuterLines\n                  ? this.renderHorizontalLine({\n                      ...config,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withHorizontalLabels &&\n                this.renderHorizontalLabels({\n                  ...config,\n                  count: count,\n                  data: datas,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatYLabel,\n                  decimalPlaces: chartConfig.decimalPlaces\n                })}\n            </G>\n            <G>\n              {withVerticalLines &&\n                (withInnerLines\n                  ? this.renderVerticalLines({\n                      ...config,\n                      data: data.datasets[0].data,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : withOuterLines\n                  ? this.renderVerticalLine({\n                      ...config,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withVerticalLabels &&\n                this.renderVerticalLabels({\n                  ...config,\n                  labels,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatXLabel\n                })}\n            </G>\n            <G>\n              {this.renderLine({\n                ...config,\n                ...chartConfig,\n                paddingRight: paddingRight as number,\n                paddingTop: paddingTop as number,\n                data: data.datasets\n              })}\n            </G>\n            <G>\n              {withShadow &&\n                this.renderShadow({\n                  ...config,\n                  data: data.datasets,\n                  paddingRight: paddingRight as number,\n                  paddingTop: paddingTop as number,\n                  useColorFromDataset: chartConfig.useShadowColorFromDataset\n                })}\n            </G>\n            <G>\n              {withDots &&\n                this.renderDots({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick\n                })}\n            </G>\n            <G>\n              {withScrollableDot &&\n                this.renderScrollableDot({\n                  ...config,\n                  ...chartConfig,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick,\n                  scrollableDotHorizontalOffset\n                })}\n            </G>\n            <G>\n              {decorator &&\n                decorator({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop,\n                  paddingRight\n                })}\n            </G>\n          </G>\n        </Svg>\n        {withScrollableDot && (\n          <ScrollView\n            style={StyleSheet.absoluteFill}\n            contentContainerStyle={{ width: width * 2 }}\n            showsHorizontalScrollIndicator={false}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: scrollableDotHorizontalOffset }\n                }\n              }\n            ])}\n            horizontal\n            bounces={false}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nexport default LineChart;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}