{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport UIManager from \"../exports/UIManager\";\nimport createDOMProps from \"../modules/createDOMProps\";\nimport { useMemo, useRef } from 'react';\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    var domProps = createDOMProps(null, _objectSpread(_objectSpread({\n      pointerEvents: pointerEvents\n    }, nativeProps), {}, {\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    }));\n    var nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n\n      for (var styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n    UIManager.updateView(node, domProps);\n  }\n}\n\nexport default function usePlatformMethods(props) {\n  var previousStyleRef = useRef(null);\n  var classList = props.classList,\n      style = props.style,\n      pointerEvents = props.pointerEvents;\n  return useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.measure = function (callback) {\n          return UIManager.measure(hostNode, callback);\n        };\n\n        hostNode.measureLayout = function (relativeToNode, success, failure) {\n          return UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n        };\n\n        hostNode.measureInWindow = function (callback) {\n          return UIManager.measureInWindow(hostNode, callback);\n        };\n\n        hostNode.setNativeProps = function (nativeProps) {\n          return setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n        };\n      }\n\n      return hostNode;\n    };\n  }, [classList, pointerEvents, style]);\n}","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-web/src/hooks/usePlatformMethods.js"],"names":["UIManager","createDOMProps","useMemo","useRef","setNativeProps","node","nativeProps","classList","pointerEvents","style","previousStyleRef","domProps","className","nextDomStyle","current","styleName","updateView","usePlatformMethods","props","hostNode","measure","callback","measureLayout","relativeToNode","success","failure","measureInWindow"],"mappings":";;;;;;AASA,OAAOA,SAAP;AACA,OAAOC,cAAP;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,WAA9B,EAA2CC,SAA3C,EAAsDC,aAAtD,EAAqEC,KAArE,EAA4EC,gBAA5E,EAA8F;AAC5F,MAAIL,IAAI,IAAI,IAAR,IAAgBC,WAApB,EAAiC;AAC/B,QAAMK,QAAQ,GAAGV,cAAc,CAAC,IAAD;AAC7BO,MAAAA,aAAa,EAAbA;AAD6B,OAE1BF,WAF0B;AAG7BC,MAAAA,SAAS,EAAE,CAACA,SAAD,EAAYD,WAAW,CAACM,SAAxB,CAHkB;AAI7BH,MAAAA,KAAK,EAAE,CAACA,KAAD,EAAQH,WAAW,CAACG,KAApB;AAJsB,OAA/B;AAOA,QAAMI,YAAY,GAAGF,QAAQ,CAACF,KAA9B;;AAEA,QAAIC,gBAAgB,CAACI,OAAjB,IAA4B,IAAhC,EAAsC;AACpC,UAAIH,QAAQ,CAACF,KAAT,IAAkB,IAAtB,EAA4B;AAC1BE,QAAAA,QAAQ,CAACF,KAAT,GAAiB,EAAjB;AACD;;AACD,WAAK,IAAMM,SAAX,IAAwBL,gBAAgB,CAACI,OAAzC,EAAkD;AAChD,YAAIH,QAAQ,CAACF,KAAT,CAAeM,SAAf,KAA6B,IAAjC,EAAuC;AACrCJ,UAAAA,QAAQ,CAACF,KAAT,CAAeM,SAAf,IAA4B,EAA5B;AACD;AACF;AACF;;AAEDL,IAAAA,gBAAgB,CAACI,OAAjB,GAA2BD,YAA3B;AAEAb,IAAAA,SAAS,CAACgB,UAAV,CAAqBX,IAArB,EAA2BM,QAA3B;AACD;AACF;;AAMD,eAAe,SAASM,kBAAT,CAA4BC,KAA5B,EAA2C;AACxD,MAAMR,gBAAgB,GAAGP,MAAM,CAAC,IAAD,CAA/B;AACA,MAAQI,SAAR,GAA4CW,KAA5C,CAAQX,SAAR;AAAA,MAAmBE,KAAnB,GAA4CS,KAA5C,CAAmBT,KAAnB;AAAA,MAA0BD,aAA1B,GAA4CU,KAA5C,CAA0BV,aAA1B;AAEA,SAAON,OAAO,CACZ;AAAA,WAAM,UAACiB,QAAD,EAAmB;AACvB,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,QAAAA,QAAQ,CAACC,OAAT,GAAmB,UAAAC,QAAQ;AAAA,iBAAIrB,SAAS,CAACoB,OAAV,CAAkBD,QAAlB,EAA4BE,QAA5B,CAAJ;AAAA,SAA3B;;AACAF,QAAAA,QAAQ,CAACG,aAAT,GAAyB,UAACC,cAAD,EAAiBC,OAAjB,EAA0BC,OAA1B;AAAA,iBACvBzB,SAAS,CAACsB,aAAV,CAAwBH,QAAxB,EAAkCI,cAAlC,EAAkDE,OAAlD,EAA2DD,OAA3D,CADuB;AAAA,SAAzB;;AAEAL,QAAAA,QAAQ,CAACO,eAAT,GAA2B,UAAAL,QAAQ;AAAA,iBAAIrB,SAAS,CAAC0B,eAAV,CAA0BP,QAA1B,EAAoCE,QAApC,CAAJ;AAAA,SAAnC;;AACAF,QAAAA,QAAQ,CAACf,cAAT,GAA0B,UAAAE,WAAW;AAAA,iBACnCF,cAAc,CAACe,QAAD,EAAWb,WAAX,EAAwBC,SAAxB,EAAmCC,aAAnC,EAAkDC,KAAlD,EAAyDC,gBAAzD,CADqB;AAAA,SAArC;AAED;;AACD,aAAOS,QAAP;AACD,KAVD;AAAA,GADY,EAYZ,CAACZ,SAAD,EAAYC,aAAZ,EAA2BC,KAA3B,CAZY,CAAd;AAcD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport UIManager from '../exports/UIManager';\nimport createDOMProps from '../modules/createDOMProps';\nimport { useMemo, useRef } from 'react';\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    const domProps = createDOMProps(null, {\n      pointerEvents,\n      ...nativeProps,\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    });\n\n    const nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n      for (const styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n\n    UIManager.updateView(node, domProps);\n  }\n}\n\n/**\n * Adds non-standard methods to the hode element. This is temporarily until an\n * API like `ReactNative.measure(hostRef, callback)` is added to React Native.\n */\nexport default function usePlatformMethods(props: Object) {\n  const previousStyleRef = useRef(null);\n  const { classList, style, pointerEvents } = props;\n\n  return useMemo(\n    () => (hostNode: any) => {\n      if (hostNode != null) {\n        hostNode.measure = callback => UIManager.measure(hostNode, callback);\n        hostNode.measureLayout = (relativeToNode, success, failure) =>\n          UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n        hostNode.measureInWindow = callback => UIManager.measureInWindow(hostNode, callback);\n        hostNode.setNativeProps = nativeProps =>\n          setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n      }\n      return hostNode;\n    },\n    [classList, pointerEvents, style]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}