{"ast":null,"code":"var CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nvar getUnit = function getUnit(str) {\n  return str.match(CSS_UNIT_RE)[1];\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar multiplyStyleLengthValue = function multiplyStyleLengthValue(value, multiple) {\n  if (typeof value === 'string') {\n    var number = parseFloat(value) * multiple;\n    var unit = getUnit(value);\n    return \"\" + number + unit;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-web/src/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","match","isNumeric","n","isNaN","parseFloat","isFinite","multiplyStyleLengthValue","value","multiple","number","unit"],"mappings":"AASA,IAAMA,WAAW,GAAG,6CAApB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACC,KAAJ,CAAUH,WAAV,EAAuB,CAAvB,CAAJ;AAAA,CAAnB;;AAEA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,CAAC,EAAI;AACrB,SAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACD,CAFD;;AAIA,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAyBC,QAAzB,EAAsC;AACrE,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAME,MAAM,GAAGL,UAAU,CAACG,KAAD,CAAV,GAAoBC,QAAnC;AACA,QAAME,IAAI,GAAGZ,OAAO,CAACS,KAAD,CAApB;AACA,gBAAUE,MAAV,GAAmBC,IAAnB;AACD,GAJD,MAIO,IAAIT,SAAS,CAACM,KAAD,CAAb,EAAsB;AAC3B,WAAOA,KAAK,GAAGC,QAAf;AACD;AACF,CARD;;AAUA,eAAeF,wBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nconst CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nconst getUnit = str => str.match(CSS_UNIT_RE)[1];\n\nconst isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nconst multiplyStyleLengthValue = (value: string | number, multiple) => {\n  if (typeof value === 'string') {\n    const number = parseFloat(value) * multiple;\n    const unit = getUnit(value);\n    return `${number}${unit}`;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;\n"]},"metadata":{},"sourceType":"module"}