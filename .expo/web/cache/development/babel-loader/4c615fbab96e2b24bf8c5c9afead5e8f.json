{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as firebase from 'firebase';\nimport \"firebase/firestore\";\nimport apiKeys from \"../config/Keys\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar app;\n\nif (firebase.apps.length === 0) {\n  app = firebase.initializeApp(apiKeys.firebaseConfig);\n} else {\n  app = firebase.app();\n}\n\nvar auth = firebase.auth();\nvar db = firebase.firestore();\nvar currentUserUID;\nauth.onAuthStateChanged(function (user) {\n  if (user) {\n    currentUserUID = user.uid;\n  } else {\n    return;\n  }\n});\n\nfunction handleSignup(email, password, firstName, lastName) {\n  var currentUser;\n  return _regeneratorRuntime.async(function handleSignup$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!email) {\n            Alert.alert('Must enter a valid email');\n          } else if (!password) {\n            Alert.alert('Must enter a valid password');\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword(email, password).then(function (userCredentials) {\n            var user = userCredentials.user;\n            console.log('Registered with: ' + user.email);\n          }).catch(function (err) {\n            return err.message === \"The email address is already in use by another account.\" ? Alert.alert(err.message) : console.log(err.message);\n          }));\n\n        case 3:\n          currentUser = firebase.auth().currentUser;\n          db.collection(\"users\").doc(currentUser.uid).set({\n            email: currentUser.email,\n            lastName: lastName,\n            firstName: firstName,\n            notFocused: 0,\n            somewhatFocused: 0,\n            veryFocused: 0\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLogin(email, password) {\n  return _regeneratorRuntime.async(function handleLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!email) {\n            Alert.alert('Must enter a valid email');\n          } else if (!password) {\n            Alert.alert('Must enter a valid password');\n          }\n\n          auth.signInWithEmailAndPassword(email, password).then(function (userCredentials) {\n            var user = userCredentials.user;\n            console.log('Logged in with: ' + user.email);\n          }).catch(function (err) {\n            return console.log(Alert.alert(err.message));\n          });\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { db, auth, handleSignup, handleLogin, currentUserUID };","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/src/api/Firebase.js"],"names":["firebase","apiKeys","app","apps","length","initializeApp","firebaseConfig","auth","db","firestore","currentUserUID","onAuthStateChanged","user","uid","handleSignup","email","password","firstName","lastName","Alert","alert","createUserWithEmailAndPassword","then","userCredentials","console","log","catch","err","message","currentUser","collection","doc","set","notFocused","somewhatFocused","veryFocused","handleLogin","signInWithEmailAndPassword"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport * as firebase from 'firebase';\nimport \"firebase/firestore\"\nimport apiKeys from '../config/Keys';\nimport { Alert } from 'react-native'\n\n// Initialize Firebase\nlet app;\nif (firebase.apps.length === 0) {\n    app = firebase.initializeApp(apiKeys.firebaseConfig);\n} else {\n    app = firebase.app()\n}\n\nconst auth = firebase.auth()\nconst db = firebase.firestore();\nlet currentUserUID;\n\nauth.onAuthStateChanged((user) => {\n    if(user) {\n        currentUserUID = user.uid\n    } else {\n        return;\n    }\n})\n\n\nasync function handleSignup(email, password, firstName, lastName) {\n    if(!email) {\n        Alert.alert('Must enter a valid email')\n    } else if (!password) {\n        Alert.alert('Must enter a valid password')\n    }\n\n    await auth\n    .createUserWithEmailAndPassword(email, password)\n    .then(userCredentials => {\n        const user = userCredentials.user\n        console.log('Registered with: ' + user.email)\n    })\n    .catch(err => err.message === \"The email address is already in use by another account.\" ? Alert.alert(err.message) : console.log(err.message))\n\n    const currentUser = firebase.auth().currentUser;\n    \n    db.collection(\"users\")\n      .doc(currentUser.uid)\n      .set({\n        email: currentUser.email,\n        lastName: lastName,\n        firstName: firstName,\n        notFocused: 0,\n        somewhatFocused: 0,\n        veryFocused: 0\n      });\n}\n\nasync function handleLogin(email, password) {\n    if(!email) {\n        Alert.alert('Must enter a valid email')\n    } else if (!password) {\n        Alert.alert('Must enter a valid password')\n    }\n\n    auth\n    .signInWithEmailAndPassword(email, password)\n    .then(userCredentials => {\n        const user = userCredentials.user\n        console.log('Logged in with: ' + user.email)\n    })\n    .catch(err => console.log(Alert.alert(err.message)))\n}\n\nexport { db, auth, handleSignup, handleLogin, currentUserUID };"]},"metadata":{},"sourceType":"module"}