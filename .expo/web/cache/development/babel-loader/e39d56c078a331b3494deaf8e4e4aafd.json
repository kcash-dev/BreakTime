{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport { addNotificationResponseReceivedListener } from \"./NotificationsEmitter\";\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nexport default function useLastNotificationResponse() {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastNotificationResponse = _useState2[0],\n      setLastNotificationResponse = _useState2[1];\n\n  useLayoutEffect(function () {\n    var subscription = addNotificationResponseReceivedListener(function (response) {\n      setLastNotificationResponse(response);\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, []);\n  useEffect(function () {\n    NotificationsEmitterModule.getLastNotificationResponseAsync == null ? void 0 : NotificationsEmitterModule.getLastNotificationResponseAsync().then(function (response) {\n      setLastNotificationResponse(function (currentResponse) {\n        return currentResponse != null ? currentResponse : response;\n      });\n    });\n  }, []);\n  return lastNotificationResponse;\n}","map":{"version":3,"sources":["../src/useLastNotificationResponse.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,eAApB,EAAqC,QAArC,QAAqD,OAArD;AAGA,SAAS,uCAAT;AACA,OAAO,0BAAP;AASA,eAAc,SAAU,2BAAV,GAAqC;AACjD,kBAAgE,QAAQ,CAEtE,SAFsE,CAAxE;AAAA;AAAA,MAAO,wBAAP;AAAA,MAAiC,2BAAjC;;AAKA,EAAA,eAAe,CAAC,YAAK;AACnB,QAAM,YAAY,GAAG,uCAAuC,CAAC,UAAA,QAAQ,EAAG;AACtE,MAAA,2BAA2B,CAAC,QAAD,CAA3B;AACD,KAF2D,CAA5D;AAGA,WAAO,YAAK;AACV,MAAA,YAAY,CAAC,MAAb;AACD,KAFD;AAGD,GAPc,EAOZ,EAPY,CAAf;AAYA,EAAA,SAAS,CAAC,YAAK;AACb,IAAA,0BAA0B,CAAC,gCAA3B,oBAAA,0BAA0B,CAAC,gCAA3B,GAAgE,IAAhE,CAAqE,UAAA,QAAQ,EAAG;AAI9E,MAAA,2BAA2B,CAAC,UAAA,eAAe;AAAA,eAAI,eAAJ,WAAI,eAAJ,GAAuB,QAAvB;AAAA,OAAhB,CAA3B;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AASA,SAAO,wBAAP;AACD","sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n/**\n * Return value of this hook may be one of three types:\n * - `undefined` until we know what to return\n * - `null` until the app receives any notification response\n * - an object of `NotificationResponse` type - the response\n *   that has been received by the app most recently.\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(undefined);\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    const subscription = addNotificationResponseReceivedListener(response => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  // On each mount of this hook we fetch last notification response\n  // from the native module which is an \"always active listener\"\n  // and always returns the most recent response.\n  useEffect(() => {\n    NotificationsEmitterModule.getLastNotificationResponseAsync?.().then(response => {\n      // We only update the state with the resolved value if it's empty,\n      // because if it's not empty it must have been populated by the `useLayoutEffect`\n      // listener which returns \"live\" values.\n      setLastNotificationResponse(currentResponse => currentResponse ?? response);\n    });\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}