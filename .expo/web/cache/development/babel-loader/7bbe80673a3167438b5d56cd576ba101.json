{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kylecash/Documents/GitHub/BreakTime/src/components/Timer.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { colors } from \"../utils/Colors\";\nimport { fontSizes, spacing } from \"../utils/Sizes\";\nimport { ButtonComp, ControlButtonComp } from \"./Button\";\nimport { Countdown } from \"./Countdown\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Notification } from \"../utils/Notification\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { didTask, removeTask, updateTask } from \"../store/taskAction\";\nimport { currentUserUID, db } from \"../api/Firebase\";\nimport * as firebase from 'firebase';\nexport var Timer = function Timer(_ref) {\n  var focusItem = _ref.focusItem,\n      setIsFocusItem = _ref.setIsFocusItem,\n      workTime = _ref.workTime,\n      breakTime = _ref.breakTime;\n\n  var _useState = useState(workTime),\n      _useState2 = _slicedToArray(_useState, 2),\n      time = _useState2[0],\n      setTime = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isStarted = _useState4[0],\n      setIsStarted = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      workTimeOver = _useState6[0],\n      setWorkTimeOver = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      howManyFocuses = _useState8[0],\n      setHowManyFocuses = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      howManyBreaks = _useState10[0],\n      setHowManyBreaks = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      totalFocusBlocks = _useState12[0],\n      setTotalFocusBlocks = _useState12[1];\n\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n\n  var finishTask = function finishTask(id) {\n    return dispatch(didTask(id));\n  };\n\n  var removeActiveTask = function removeActiveTask(id) {\n    return dispatch(removeTask(id));\n  };\n\n  var tasks = useSelector(function (state) {\n    return state.tasks;\n  });\n  var foundTask;\n\n  if (focusItem) {\n    foundTask = tasks.find(function (item) {\n      return item.id === focusItem[0].id;\n    });\n  }\n\n  console.log(foundTask);\n\n  var setPlayPause = function setPlayPause() {\n    if (isStarted) {\n      setIsStarted(false);\n    } else if (!isStarted) {\n      setIsStarted(true);\n    }\n  };\n\n  var vibrate = function vibrate() {\n    if (Platform.OS === 'ios') {\n      var interval = setInterval(function () {\n        return Vibration.vibrate();\n      }, 1000);\n      setTimeout(function () {\n        return clearInterval(interval);\n      }, 10000);\n    } else {\n      Vibration.vibrate(10000);\n    }\n  };\n\n  var onEnd = function onEnd() {\n    setIsStarted(false);\n\n    if (workTimeOver === false && howManyFocuses < 3 && workTime === .25) {\n      vibrate();\n      setTime(breakTime);\n      setWorkTimeOver(true);\n      setHowManyFocuses(howManyFocuses + 1);\n      setTotalFocusBlocks(totalFocusBlocks + .25);\n      navigation.navigate('Survey');\n    } else if (workTimeOver === true && workTime === .25) {\n      vibrate();\n      setTime(workTime);\n      setWorkTimeOver(false);\n      setHowManyBreaks(howManyBreaks + 1);\n    } else if (workTimeOver === false && howManyFocuses === 3 && howManyBreaks === 3 && workTime === .25) {\n      setTime(10);\n      setWorkTimeOver(true);\n      setHowManyFocuses(0);\n      setHowManyBreaks(0);\n      setTotalFocusBlocks(totalFocusBlocks + .25);\n      navigation.navigate('Survey');\n    } else if (workTimeOver === false && howManyFocuses < 2 && workTime === .50) {\n      vibrate();\n      setTime(breakTime);\n      setWorkTimeOver(true);\n      setHowManyFocuses(howManyFocuses + 2);\n      setTotalFocusBlocks(totalFocusBlocks + .5);\n      navigation.navigate('Survey');\n    } else if (workTimeOver === true && workTime === .50) {\n      vibrate();\n      setTime(workTime);\n      setWorkTimeOver(false);\n      setHowManyBreaks(howManyBreaks + 2);\n    } else if (workTimeOver === false && howManyFocuses === 2 && howManyBreaks === 2 && workTime === .50) {\n      setTime(20);\n      setWorkTimeOver(true);\n      setHowManyFocuses(0);\n      setHowManyBreaks(0);\n      setTotalFocusBlocks(totalFocusBlocks + .5);\n      navigation.navigate('Survey');\n    }\n  };\n\n  function addTask() {\n    var incrementFocus, incrementFocusTime;\n    return _regeneratorRuntime.async(function addTask$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            incrementFocus = totalFocusBlocks * workTime;\n            incrementFocusTime = firebase.firestore.FieldValue.increment(incrementFocus);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(db.collection('users').doc(currentUserUID).set({\n              tasks: tasks\n            }, {\n              merge: true\n            }).then(console.log('Task updated!')));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(db.collection('users').doc(currentUserUID).update({\n              totalFocusTime: incrementFocusTime\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var handleSetters = function handleSetters() {\n    if (howManyFocuses > 0) {\n      addTask();\n      finishTask(foundTask.id);\n    } else {\n      removeActiveTask(foundTask.id);\n    }\n\n    setIsFocusItem(false);\n  };\n\n  return React.createElement(View, {\n    style: styles.timerContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, React.createElement(Countdown, {\n    time: time,\n    isStarted: !isStarted,\n    onEnd: onEnd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  })), !workTimeOver ? React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, \"You are focusing on:\"), React.createElement(Text, {\n    style: styles.focusText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, foundTask.task)) : null, React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, React.createElement(ControlButtonComp, {\n    name: \"Pause\",\n    altName: \"Start\",\n    callback: setPlayPause,\n    isPlaying: isStarted,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.restartButtonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, React.createElement(ButtonComp, {\n    name: \"Restart\",\n    callback: handleSetters,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  })), workTimeOver ? React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, \"TAKE A BREAK!\")) : null, howManyFocuses === 0 && howManyBreaks === 0 && workTimeOver === true ? React.createElement(View, {\n    style: styles.imageContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: 'https://i.imgur.com/aON4CyZ.jpg'\n    },\n    style: styles.image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  })) : null);\n};\nvar styles = StyleSheet.create({\n  timerContainer: {\n    flex: 1\n  },\n  text: {\n    color: colors.black,\n    textAlign: 'center'\n  },\n  focusText: {\n    color: colors.secondary,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: fontSizes.xl,\n    textShadowColor: colors.black,\n    textShadowOffset: {\n      width: 0.5,\n      height: 0.5\n    },\n    textShadowRadius: 1\n  },\n  buttonContainer: {\n    width: '100%',\n    alignSelf: 'center',\n    marginTop: spacing.lg,\n    shadowColor: colors.black,\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10\n  },\n  restartButtonContainer: {\n    position: 'absolute',\n    bottom: spacing.xxl,\n    alignSelf: 'center',\n    shadowColor: colors.black,\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10\n  },\n  image: {\n    width: 250,\n    height: 250,\n    alignSelf: 'center'\n  },\n  imageContainer: {\n    position: 'absolute',\n    bottom: 100,\n    alignSelf: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/src/components/Timer.js"],"names":["React","useState","useEffect","colors","fontSizes","spacing","ButtonComp","ControlButtonComp","Countdown","useNavigation","Notification","useDispatch","useSelector","didTask","removeTask","updateTask","currentUserUID","db","firebase","Timer","focusItem","setIsFocusItem","workTime","breakTime","time","setTime","isStarted","setIsStarted","workTimeOver","setWorkTimeOver","howManyFocuses","setHowManyFocuses","howManyBreaks","setHowManyBreaks","totalFocusBlocks","setTotalFocusBlocks","navigation","dispatch","finishTask","id","removeActiveTask","tasks","state","foundTask","find","item","console","log","setPlayPause","vibrate","Platform","OS","interval","setInterval","Vibration","setTimeout","clearInterval","onEnd","navigate","addTask","incrementFocus","incrementFocusTime","firestore","FieldValue","increment","collection","doc","set","merge","then","update","totalFocusTime","handleSetters","styles","timerContainer","text","focusText","task","buttonContainer","restartButtonContainer","imageContainer","uri","image","StyleSheet","create","flex","color","black","textAlign","secondary","fontWeight","fontSize","xl","textShadowColor","textShadowOffset","width","height","textShadowRadius","alignSelf","marginTop","lg","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","position","bottom","xxl"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Platform, Vibration, Image, Alert } from 'react-native';\nimport { colors } from '../utils/Colors';\nimport { fontSizes, spacing } from '../utils/Sizes';\nimport { ButtonComp, ControlButtonComp } from './Button';\nimport { Countdown } from './Countdown';\n\nimport { useNavigation } from '@react-navigation/native';\nimport { Notification } from '../utils/Notification';\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { didTask, removeTask, updateTask } from '../store/taskAction';\nimport { currentUserUID, db } from '../api/Firebase';\nimport * as firebase from 'firebase';\n\nexport const Timer = ({\n    focusItem,\n    setIsFocusItem,\n    workTime,\n    breakTime\n}) => {\n    const [ time, setTime ] = useState(workTime);\n    const [ isStarted, setIsStarted ] = useState(false);\n    const [ workTimeOver, setWorkTimeOver ] = useState(false);\n    const [ howManyFocuses, setHowManyFocuses ] = useState(0);\n    const [ howManyBreaks, setHowManyBreaks ] = useState(0);\n    const [ totalFocusBlocks, setTotalFocusBlocks ] = useState(0);\n\n    const navigation = useNavigation();\n\n    const dispatch = useDispatch();\n    const finishTask = (id) => dispatch(didTask(id));\n    const removeActiveTask = (id) => dispatch(removeTask(id));\n    const tasks = useSelector(state => state.tasks);\n\n    let foundTask;\n\n    if (focusItem) {\n        foundTask = tasks.find((item) => item.id === focusItem[0].id)\n    }\n\n    console.log(foundTask)\n\n    const setPlayPause = () => {\n        if(isStarted) {\n            setIsStarted(false)\n        } else if (!isStarted) {\n            setIsStarted(true)\n        }\n    }\n\n    const vibrate = () => {\n        if (Platform.OS === 'ios') {\n            const interval = setInterval(() => Vibration.vibrate(), 1000);\n            setTimeout(() => clearInterval(interval), 10000)\n        } else {\n            Vibration.vibrate(10000)\n        }\n    }\n\n    const onEnd = () => {\n        setIsStarted(false)\n        if (workTimeOver === false && howManyFocuses < 3 && workTime === .25) {\n            vibrate()\n            setTime(breakTime)\n            setWorkTimeOver(true)\n            setHowManyFocuses(howManyFocuses + 1)\n            setTotalFocusBlocks(totalFocusBlocks + .25)\n            navigation.navigate('Survey')\n        } else if (workTimeOver === true && workTime === .25) {\n            vibrate();\n            setTime(workTime)\n            setWorkTimeOver(false)\n            setHowManyBreaks(howManyBreaks + 1)\n        } else if (workTimeOver === false && howManyFocuses === 3 && howManyBreaks === 3 && workTime === .25) {\n            setTime(10)\n            setWorkTimeOver(true)\n            setHowManyFocuses(0)\n            setHowManyBreaks(0)\n            setTotalFocusBlocks(totalFocusBlocks + .25)\n            navigation.navigate('Survey')\n        } else if (workTimeOver === false && howManyFocuses < 2 && workTime === .50) {\n            vibrate()\n            setTime(breakTime)\n            setWorkTimeOver(true)\n            setHowManyFocuses(howManyFocuses + 2)\n            setTotalFocusBlocks(totalFocusBlocks + .5)\n            navigation.navigate('Survey')\n        } else if (workTimeOver === true && workTime === .50) {\n            vibrate();\n            setTime(workTime)\n            setWorkTimeOver(false)\n            setHowManyBreaks(howManyBreaks + 2)\n        } else if (workTimeOver === false && howManyFocuses === 2 && howManyBreaks === 2 && workTime === .50) {\n            setTime(20)\n            setWorkTimeOver(true)\n            setHowManyFocuses(0)\n            setHowManyBreaks(0)\n            setTotalFocusBlocks(totalFocusBlocks + .5)\n            navigation.navigate('Survey')\n        }\n    }\n\n    async function addTask() {\n        let incrementFocus = totalFocusBlocks * workTime\n        const incrementFocusTime = firebase.firestore.FieldValue.increment(incrementFocus)\n        \n        await db\n        .collection('users')\n        .doc(currentUserUID)\n        .set({\n            tasks: tasks,\n        }, { merge: true })\n        .then(console.log('Task updated!'))\n\n        await db\n        .collection('users')\n        .doc(currentUserUID)\n        .update({\n            totalFocusTime: incrementFocusTime\n        })\n    }\n\n    const handleSetters = () => {\n        if (howManyFocuses > 0) {\n            addTask()\n            finishTask(foundTask.id)\n        } else {\n            removeActiveTask(foundTask.id)\n        }\n        setIsFocusItem(false)\n    }\n\n    return (\n        <View style={ styles.timerContainer }>\n            <View>\n                <Countdown\n                    time={ time }\n                    isStarted={ !isStarted }\n                    onEnd={ onEnd }\n                />\n            </View>\n            { !workTimeOver ? \n                <View>\n                    <Text style={ styles.text }>You are focusing on:</Text>\n                    <Text style={ styles.focusText }>{ foundTask.task }</Text>\n                </View>\n                :\n                null\n            }\n            <View style={ styles.buttonContainer }>\n                <ControlButtonComp \n                    name=\"Pause\" \n                    altName=\"Start\" \n                    callback={ setPlayPause } \n                    isPlaying={ isStarted }\n                />\n            </View>\n            <View\n                style={ styles.restartButtonContainer }\n            >\n                <ButtonComp \n                    name='Restart' \n                    callback={ handleSetters }\n                />\n            </View>\n            { workTimeOver ? \n                <View>\n                    <Text style={ styles.text }>TAKE A BREAK!</Text>\n                </View>\n                :\n                null\n            }\n            { howManyFocuses === 0 && howManyBreaks === 0 && workTimeOver === true ?\n                <View style={ styles.imageContainer }>\n                    <Image \n                        source={{uri: 'https://i.imgur.com/aON4CyZ.jpg'}} \n                        style={ styles.image }\n                    />\n                </View>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    timerContainer: {\n        flex: 1\n    },\n    text: {\n        color: colors.black,\n        textAlign: 'center'\n    },\n    focusText: {\n        color: colors.secondary,\n        textAlign: 'center',\n        fontWeight: 'bold',\n        fontSize: fontSizes.xl,\n        textShadowColor: colors.black, \n        textShadowOffset: { width: 0.5, height: 0.5 }, \n        textShadowRadius: 1,\n    },\n    buttonContainer: {\n        width: '100%',\n        alignSelf: 'center',\n        marginTop: spacing.lg,\n        shadowColor: colors.black,\n        shadowOffset: {\n            width: 0,\n            height: 5,\n        },\n        shadowOpacity: 0.34,\n        shadowRadius: 6.27,\n\n        elevation: 10,\n    },\n    restartButtonContainer: {\n        position: 'absolute',\n        bottom: spacing.xxl,\n        alignSelf: 'center',\n        shadowColor: colors.black,\n        shadowOffset: {\n            width: 0,\n            height: 5,\n        },\n        shadowOpacity: 0.34,\n        shadowRadius: 6.27,\n\n        elevation: 10,\n    },\n    image: {\n        width: 250,\n        height: 250,\n        alignSelf: 'center'\n    },\n    imageContainer: {\n        position: 'absolute',\n        bottom: 100,\n        alignSelf: 'center'\n    }\n})"]},"metadata":{},"sourceType":"module"}