{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from \"./useLayoutEffect\";\nimport UIManager from \"../exports/UIManager\";\nvar DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\nvar didWarn = !canUseDOM;\nvar resizeObserver = null;\n\nfunction getResizeObserver() {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function (entries) {\n        entries.forEach(function (entry) {\n          var node = entry.target;\n          var onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n\n          if (typeof onLayout === 'function') {\n            UIManager.measure(node, function (x, y, width, height, left, top) {\n              var event = {\n                nativeEvent: {\n                  layout: {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    left: left,\n                    top: top\n                  }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: function get() {\n                  return entry.target;\n                }\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn('onLayout relies on ResizeObserver which is not supported by your browser. ' + 'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');\n      didWarn = true;\n    }\n  }\n\n  return resizeObserver;\n}\n\nexport default function useElementLayout(ref, onLayout) {\n  var observer = getResizeObserver();\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n  useLayoutEffect(function () {\n    var node = ref.current;\n\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n\n    return function () {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-web/src/hooks/useElementLayout.js"],"names":["canUseDOM","useLayoutEffect","UIManager","DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","node","target","onLayout","measure","x","y","width","height","left","top","event","nativeEvent","layout","timeStamp","Date","now","Object","defineProperty","enumerable","get","process","env","NODE_ENV","console","warn","useElementLayout","ref","observer","current","observe","unobserve"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { ElementRef } from 'react';\nimport type { LayoutEvent } from '../types';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from './useLayoutEffect';\nimport UIManager from '../exports/UIManager';\n\nconst DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\n\nlet didWarn = !canUseDOM;\nlet resizeObserver = null;\n\nfunction getResizeObserver(): ?ResizeObserver {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function(entries) {\n        entries.forEach(entry => {\n          const node = entry.target;\n          const onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, (x, y, width, height, left, top) => {\n              const event: LayoutEvent = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: { x, y, width, height, left, top }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: () => entry.target\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn(\n        'onLayout relies on ResizeObserver which is not supported by your browser. ' +\n          'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.'\n      );\n      didWarn = true;\n    }\n  }\n  return resizeObserver;\n}\n\nexport default function useElementLayout(\n  ref: ElementRef<any>,\n  onLayout?: ?(e: LayoutEvent) => void\n) {\n  const observer = getResizeObserver();\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n\n  // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n    return () => {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}\n"]},"metadata":{},"sourceType":"module"}