{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport NotificationCategoriesModule from \"./NotificationCategoriesModule.native\";\nexport default function setNotificationCategoryAsync(identifier, actions, options) {\n  return _regeneratorRuntime.async(function setNotificationCategoryAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (NotificationCategoriesModule.setNotificationCategoryAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Notifications', 'setNotificationCategoryAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(NotificationCategoriesModule.setNotificationCategoryAsync(identifier, actions, options));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/setNotificationCategoryAsync.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,4BAAP;AAGA,eAAe,SAAe,4BAAf,CACb,UADa,EAEb,OAFa,EAGb,OAHa;AAAA;AAAA;AAAA;AAAA;AAAA,cAcR,4BAA4B,CAAC,4BAdrB;AAAA;AAAA;AAAA;;AAAA,gBAeL,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,8BAAzC,CAfK;;AAAA;AAAA;AAAA,2CAkBA,4BAA4B,CAAC,4BAA7B,CACX,UADW,EAEX,OAFW,EAGX,OAHW,CAlBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport NotificationCategoriesModule from './NotificationCategoriesModule.native';\nimport { NotificationCategory, NotificationAction } from './Notifications.types';\n\nexport default async function setNotificationCategoryAsync(\n  identifier: string,\n  actions: NotificationAction[],\n  options?: {\n    previewPlaceholder?: string;\n    intentIdentifiers?: string[];\n    categorySummaryFormat?: string;\n    customDismissAction?: boolean;\n    allowInCarPlay?: boolean;\n    showTitle?: boolean;\n    showSubtitle?: boolean;\n    allowAnnouncement?: boolean;\n  }\n): Promise<NotificationCategory> {\n  if (!NotificationCategoriesModule.setNotificationCategoryAsync) {\n    throw new UnavailabilityError('Notifications', 'setNotificationCategoryAsync');\n  }\n\n  return await NotificationCategoriesModule.setNotificationCategoryAsync(\n    identifier,\n    actions,\n    options\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}