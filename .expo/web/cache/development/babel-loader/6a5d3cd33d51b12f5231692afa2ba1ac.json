{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function setNotificationChannelGroupAsync(groupId, group) {\n  return _regeneratorRuntime.async(function setNotificationChannelGroupAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.debug('Notification channels feature is only supported on Android.');\n          return _context.abrupt(\"return\", null);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/setNotificationChannelGroupAsync.ts"],"names":[],"mappings":";AAKA,eAAe,SAAe,gCAAf,CACb,OADa,EAEb,KAFa;AAAA;AAAA;AAAA;AAAA;AAIb,UAAA,OAAO,CAAC,KAAR,CAAc,6DAAd;AAJa,2CAKN,IALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  NotificationChannelGroup,\n  NotificationChannelGroupInput,\n} from './NotificationChannelGroupManager.types';\n\nexport default async function setNotificationChannelGroupAsync(\n  groupId: string,\n  group: NotificationChannelGroupInput\n): Promise<NotificationChannelGroup | null> {\n  console.debug('Notification channels feature is only supported on Android.');\n  return null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}