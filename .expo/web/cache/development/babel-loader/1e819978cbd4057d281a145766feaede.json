{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, Platform, SyntheticPlatformEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\nexport default function getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(_subscribeDeviceToPushNotificationsAsync());\n\n        case 2:\n          data = _context.sent;\n          SyntheticPlatformEmitter.emit('onDevicePushToken', {\n            devicePushToken: data\n          });\n          return _context.abrupt(\"return\", {\n            type: Platform.OS,\n            data: data\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\n\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  var _Constants$manifest$n, _Constants$manifest$n2, _Constants$manifest;\n\n  var registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime.async(function _subscribeDeviceToPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if ((_Constants$manifest$n = Constants.manifest.notification) != null && _Constants$manifest$n.vapidPublicKey) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 2:\n          if ((_Constants$manifest$n2 = Constants.manifest.notification) != null && _Constants$manifest$n2.serviceWorkerPath) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n\n        case 4:\n          guardPermission();\n          registration = null;\n          _context2.prev = 6;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.register(Constants.manifest.notification.serviceWorkerPath));\n\n        case 9:\n          registration = _context2.sent;\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](6);\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + Constants.manifest.notification.serviceWorkerPath + \") could not be registered: \" + _context2.t0);\n\n        case 15:\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);\n\n        case 17:\n          if (registration.active) {\n            _context2.next = 19;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n\n        case 19:\n          subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n          };\n          pushSubscription = null;\n          _context2.prev = 21;\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions));\n\n        case 24:\n          pushSubscription = _context2.sent;\n          _context2.next = 30;\n          break;\n\n        case 27:\n          _context2.prev = 27;\n          _context2.t1 = _context2[\"catch\"](21);\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + _context2.t1 + ')');\n\n        case 30:\n          pushSubscriptionJson = pushSubscription.toJSON();\n          subscriptionObject = {\n            endpoint: pushSubscriptionJson.endpoint,\n            keys: {\n              p256dh: pushSubscriptionJson.keys.p256dh,\n              auth: pushSubscriptionJson.keys.auth\n            }\n          };\n          notificationIcon = (((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.notification) || {}).icon;\n          _context2.next = 35;\n          return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({\n            fromExpoWebClient: {\n              notificationIcon: notificationIcon\n            }\n          })));\n\n        case 35:\n          return _context2.abrupt(\"return\", subscriptionObject);\n\n        case 36:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[6, 12], [21, 27]], Promise);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, Platform, SyntheticPlatformEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(\n      // @ts-ignore: TODO: not on the schema\n      Constants.manifest.notification.serviceWorkerPath\n    );\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      // @ts-ignore: TODO: not on the schema\n      `Could not register this device for push notifications because the service worker (${Constants.manifest.notification.serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    // @ts-ignore: TODO: not on the schema\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest?.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}