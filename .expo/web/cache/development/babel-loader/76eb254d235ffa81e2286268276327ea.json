{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nvar emitter = new EventEmitter(NotificationsEmitterModule);\nvar didReceiveNotificationEventName = 'onDidReceiveNotification';\nvar didDropNotificationsEventName = 'onNotificationsDeleted';\nvar didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nexport var DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, listener);\n}\nexport function removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport function getLastNotificationResponseAsync() {\n  return _regeneratorRuntime.async(function getLastNotificationResponseAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (NotificationsEmitterModule.getLastNotificationResponseAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(NotificationsEmitterModule.getLastNotificationResponseAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,EAAqC,mBAArC,QAAgE,kBAAhE;AAGA,OAAO,0BAAP;AAGA,IAAM,OAAO,GAAG,IAAI,YAAJ,CAAiB,0BAAjB,CAAhB;AAEA,IAAM,+BAA+B,GAAG,0BAAxC;AACA,IAAM,6BAA6B,GAAG,wBAAtC;AACA,IAAM,uCAAuC,GAAG,kCAAhD;AAEA,OAAO,IAAM,yBAAyB,GAAG,4CAAlC;AAEP,OAAM,SAAU,+BAAV,CACJ,QADI,EACmC;AAEvC,SAAO,OAAO,CAAC,WAAR,CAAkC,+BAAlC,EAAmE,QAAnE,CAAP;AACD;AAED,OAAM,SAAU,+BAAV,CAA0C,QAA1C,EAA8D;AAClE,SAAO,OAAO,CAAC,WAAR,CAA0B,6BAA1B,EAAyD,QAAzD,CAAP;AACD;AAED,OAAM,SAAU,uCAAV,CACJ,QADI,EAC2C;AAE/C,SAAO,OAAO,CAAC,WAAR,CACL,uCADK,EAEL,QAFK,CAAP;AAID;AAED,OAAM,SAAU,8BAAV,CAAyC,YAAzC,EAAmE;AACvE,EAAA,OAAO,CAAC,kBAAR,CAA2B,YAA3B;AACD;AAED,OAAO,SAAe,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,0BAA0B,CAAC,gCAD3B;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,mBAAxB,EAA6C,kCAA7C,CAFH;;AAAA;AAAA;AAAA,2CAIQ,0BAA0B,CAAC,gCAA3B,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}