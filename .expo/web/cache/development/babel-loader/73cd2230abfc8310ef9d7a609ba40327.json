{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}","map":{"version":3,"sources":["/Users/kylecash/Documents/GitHub/BreakTime/node_modules/react-native-web/src/hooks/useResponderEvents/createResponderEvent.js"],"names":["getBoundingClientRect","ResponderTouchHistoryStore","emptyFunction","emptyObject","emptyArray","normalizeIdentifier","identifier","createResponderEvent","domEvent","rect","propagationWasStopped","changedTouches","touches","domEventChangedTouches","domEventType","type","metaKey","shiftKey","force","clientX","clientY","pageX","pageY","preventDefault","bind","timestamp","timeStamp","normalizeTouches","Array","prototype","slice","call","map","touch","locationX","locationY","target","emulatedTouches","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","persist","stopPropagation","touchHistory","x","left","y","top"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { TouchEvent } from './ResponderEventTypes';\n\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nexport type ResponderEvent = {|\n  bubbles: boolean,\n  cancelable: boolean,\n  currentTarget: any,\n  defaultPrevented: ?boolean,\n  dispatchConfig: {\n    registrationName?: string,\n    phasedRegistrationNames?: {\n      bubbled: string,\n      captured: string\n    }\n  },\n  eventPhase: ?number,\n  isDefaultPrevented: () => boolean,\n  isPropagationStopped: () => boolean,\n  isTrusted: ?boolean,\n  preventDefault: () => void,\n  stopPropagation: () => void,\n  nativeEvent: TouchEvent,\n  persist: () => void,\n  target: ?any,\n  timeStamp: number,\n  touchHistory: $ReadOnly<{|\n    indexOfSingleActiveTouch: number,\n    mostRecentTimeStamp: number,\n    numberActiveTouches: number,\n    touchBank: Array<{|\n      currentPageX: number,\n      currentPageY: number,\n      currentTimeStamp: number,\n      previousPageX: number,\n      previousPageY: number,\n      previousTimeStamp: number,\n      startPageX: number,\n      startPageY: number,\n      startTimeStamp: number,\n      touchActive: boolean\n    |}>\n  |}>\n|};\n\nconst emptyFunction = () => {};\nconst emptyObject = {};\nconst emptyArray = [];\n\n/**\n * Safari produces very large identifiers that would cause the `touchBank` array\n * length to be so large as to crash the browser, if not normalized like this.\n * In the future the `touchBank` should use an object/map instead.\n */\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\nexport default function createResponderEvent(domEvent: any): ResponderEvent {\n  let rect;\n  let propagationWasStopped = false;\n  let changedTouches;\n  let touches;\n\n  const domEventChangedTouches = domEvent.changedTouches;\n  const domEventType = domEvent.type;\n\n  const metaKey = domEvent.metaKey === true;\n  const shiftKey = domEvent.shiftKey === true;\n  const force = (domEventChangedTouches && domEventChangedTouches[0].force) || 0;\n  const identifier = normalizeIdentifier(\n    (domEventChangedTouches && domEventChangedTouches[0].identifier) || 0\n  );\n  const clientX = (domEventChangedTouches && domEventChangedTouches[0].clientX) || domEvent.clientX;\n  const clientY = (domEventChangedTouches && domEventChangedTouches[0].clientY) || domEvent.clientY;\n  const pageX = (domEventChangedTouches && domEventChangedTouches[0].pageX) || domEvent.pageX;\n  const pageY = (domEventChangedTouches && domEventChangedTouches[0].pageY) || domEvent.pageY;\n  const preventDefault =\n    typeof domEvent.preventDefault === 'function'\n      ? domEvent.preventDefault.bind(domEvent)\n      : emptyFunction;\n  const timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(touch => {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    const emulatedTouches = [\n      {\n        force,\n        identifier,\n        get locationX() {\n          return locationX(clientX);\n        },\n        get locationY() {\n          return locationY(clientY);\n        },\n        pageX,\n        pageY,\n        target: domEvent.target,\n        timestamp\n      }\n    ];\n    changedTouches = emulatedTouches;\n    touches =\n      domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  const responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey,\n      shiftKey,\n      changedTouches,\n      force,\n      identifier,\n      get locationX() {\n        return locationX(clientX);\n      },\n      get locationY() {\n        return locationY(clientY);\n      },\n      pageX,\n      pageY,\n      target: domEvent.target,\n      timestamp,\n      touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault,\n    stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}\n"]},"metadata":{},"sourceType":"module"}