{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\n\nexport default {\n  getInstallationIdAsync: function getInstallationIdAsync() {\n    var installationId;\n    return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n\n              if (!installationId || typeof installationId !== 'string') {\n                installationId = uuidv4();\n                localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n              }\n            } catch (error) {\n              installationId = _getFallbackInstallationId();\n            }\n\n            return _context.abrupt(\"return\", installationId);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRegistrationInfoAsync: function getRegistrationInfoAsync() {\n    return _regeneratorRuntime.async(function getRegistrationInfoAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", localStorage.getItem(REGISTRATION_INFO_KEY));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setRegistrationInfoAsync: function setRegistrationInfoAsync(registrationInfo) {\n    return _regeneratorRuntime.async(function setRegistrationInfoAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n\n            if (registrationInfo) {\n              localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n            } else {\n              localStorage.removeItem(REGISTRATION_INFO_KEY);\n            }\n\n            _context3.next = 7;\n            break;\n\n          case 4:\n            _context3.prev = 4;\n            _context3.t0 = _context3[\"catch\"](0);\n            throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + _context3.t0);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"sources":["../src/ServerRegistrationModule.web.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,EAAE,IAAI,MAAf,QAA6B,MAA7B;AAIA,IAAM,mBAAmB,GAAG,oCAA5B;AACA,IAAM,qBAAqB,GAAG,sCAA9B;;AAGA,IAAI,0BAAyB,GAAG,qCAAK;AACnC,MAAM,qBAAqB,GAAG,MAAM,EAApC;;AACA,EAAA,0BAAyB,GAAG;AAAA,WAAM,qBAAN;AAAA,GAA5B;AACD,CAHD;;AAKA,eAAe;AACb,EAAA,sBAAsB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAGtB,gBAAI;AACF,cAAA,cAAc,GAAG,YAAY,CAAC,OAAb,CAAqB,mBAArB,CAAjB;;AACA,kBAAI,CAAC,cAAD,IAAmB,OAAO,cAAP,KAA0B,QAAjD,EAA2D;AACzD,gBAAA,cAAc,GAAG,MAAM,EAAvB;AACA,gBAAA,YAAY,CAAC,OAAb,CAAqB,mBAArB,EAA0C,cAA1C;AACD;AACF,aAND,CAME,OAAO,KAAP,EAAc;AACd,cAAA,cAAc,GAAG,0BAAyB,EAA1C;AACD;;AAXqB,6CAaf,cAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADX;AAgBb,EAAA,wBAAwB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,8CACjB,YAAY,CAAC,OAAb,CAAqB,qBAArB,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAhBb;AAmBb,EAAA,wBAAwB,EAAE,kCAAO,gBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEtB,gBAAI,gBAAJ,EAAsB;AACpB,cAAA,YAAY,CAAC,OAAb,CAAqB,qBAArB,EAA4C,gBAA5C;AACD,aAFD,MAEO;AACL,cAAA,YAAY,CAAC,UAAb,CAAwB,qBAAxB;AACD;;AANqB;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAQhB,IAAI,UAAJ,CACJ,iCADI,4FARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAnBb;AAkCb,EAAA,WAAW,EAAE,uBAAK,CAAG,CAlCR;AAmCb,EAAA,eAAe,EAAE,2BAAK,CAAG;AAnCZ,CAAf","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}